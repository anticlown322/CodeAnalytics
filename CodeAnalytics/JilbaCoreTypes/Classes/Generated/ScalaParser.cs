//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Scala.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class ScalaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, Id=62, BooleanLiteral=63, CharacterLiteral=64, SymbolLiteral=65, 
		IntegerLiteral=66, StringLiteral=67, FloatingPointLiteral=68, Varid=69, 
		BoundVarid=70, Paren=71, Delim=72, Semi=73, NL=74, NEWLINE=75, WS=76, 
		COMMENT=77, LINE_COMMENT=78;
	public const int
		RULE_literal = 0, RULE_qualId = 1, RULE_ids = 2, RULE_stableId = 3, RULE_classQualifier = 4, 
		RULE_type_ = 5, RULE_functionArgTypes = 6, RULE_existentialClause = 7, 
		RULE_existentialDcl = 8, RULE_infixType = 9, RULE_compoundType = 10, RULE_annotType = 11, 
		RULE_simpleType = 12, RULE_typeArgs = 13, RULE_types = 14, RULE_refinement = 15, 
		RULE_refineStat = 16, RULE_typePat = 17, RULE_ascription = 18, RULE_expr = 19, 
		RULE_expr1 = 20, RULE_prefixDef = 21, RULE_postfixExpr = 22, RULE_infixExpr = 23, 
		RULE_prefixExpr = 24, RULE_simpleExpr = 25, RULE_simpleExpr1 = 26, RULE_exprs = 27, 
		RULE_argumentExprs = 28, RULE_args = 29, RULE_blockExpr = 30, RULE_block = 31, 
		RULE_blockStat = 32, RULE_resultExpr = 33, RULE_enumerators = 34, RULE_generator = 35, 
		RULE_caseClauses = 36, RULE_caseClause = 37, RULE_guard_ = 38, RULE_pattern = 39, 
		RULE_pattern1 = 40, RULE_pattern2 = 41, RULE_pattern3 = 42, RULE_simplePattern = 43, 
		RULE_patterns = 44, RULE_typeParamClause = 45, RULE_funTypeParamClause = 46, 
		RULE_variantTypeParam = 47, RULE_typeParam = 48, RULE_paramClauses = 49, 
		RULE_paramClause = 50, RULE_params = 51, RULE_param = 52, RULE_paramType = 53, 
		RULE_classParamClauses = 54, RULE_classParamClause = 55, RULE_classParams = 56, 
		RULE_classParam = 57, RULE_bindings = 58, RULE_binding = 59, RULE_modifier = 60, 
		RULE_localModifier = 61, RULE_accessModifier = 62, RULE_accessQualifier = 63, 
		RULE_annotation = 64, RULE_constrAnnotation = 65, RULE_templateBody = 66, 
		RULE_templateStat = 67, RULE_selfType = 68, RULE_import_ = 69, RULE_importExpr = 70, 
		RULE_importSelectors = 71, RULE_importSelector = 72, RULE_dcl = 73, RULE_valDcl = 74, 
		RULE_varDcl = 75, RULE_funDcl = 76, RULE_funSig = 77, RULE_typeDcl = 78, 
		RULE_patVarDef = 79, RULE_def_ = 80, RULE_patDef = 81, RULE_varDef = 82, 
		RULE_funDef = 83, RULE_typeDef = 84, RULE_tmplDef = 85, RULE_classDef = 86, 
		RULE_traitDef = 87, RULE_objectDef = 88, RULE_classTemplateOpt = 89, RULE_traitTemplateOpt = 90, 
		RULE_classTemplate = 91, RULE_traitTemplate = 92, RULE_classParents = 93, 
		RULE_traitParents = 94, RULE_constr = 95, RULE_earlyDefs = 96, RULE_earlyDef = 97, 
		RULE_constrExpr = 98, RULE_constrBlock = 99, RULE_selfInvocation = 100, 
		RULE_topStatSeq = 101, RULE_topStat = 102, RULE_packaging = 103, RULE_packageObject = 104, 
		RULE_compilationUnit = 105;
	public static readonly string[] ruleNames = {
		"literal", "qualId", "ids", "stableId", "classQualifier", "type_", "functionArgTypes", 
		"existentialClause", "existentialDcl", "infixType", "compoundType", "annotType", 
		"simpleType", "typeArgs", "types", "refinement", "refineStat", "typePat", 
		"ascription", "expr", "expr1", "prefixDef", "postfixExpr", "infixExpr", 
		"prefixExpr", "simpleExpr", "simpleExpr1", "exprs", "argumentExprs", "args", 
		"blockExpr", "block", "blockStat", "resultExpr", "enumerators", "generator", 
		"caseClauses", "caseClause", "guard_", "pattern", "pattern1", "pattern2", 
		"pattern3", "simplePattern", "patterns", "typeParamClause", "funTypeParamClause", 
		"variantTypeParam", "typeParam", "paramClauses", "paramClause", "params", 
		"param", "paramType", "classParamClauses", "classParamClause", "classParams", 
		"classParam", "bindings", "binding", "modifier", "localModifier", "accessModifier", 
		"accessQualifier", "annotation", "constrAnnotation", "templateBody", "templateStat", 
		"selfType", "import_", "importExpr", "importSelectors", "importSelector", 
		"dcl", "valDcl", "varDcl", "funDcl", "funSig", "typeDcl", "patVarDef", 
		"def_", "patDef", "varDef", "funDef", "typeDef", "tmplDef", "classDef", 
		"traitDef", "objectDef", "classTemplateOpt", "traitTemplateOpt", "classTemplate", 
		"traitTemplate", "classParents", "traitParents", "constr", "earlyDefs", 
		"earlyDef", "constrExpr", "constrBlock", "selfInvocation", "topStatSeq", 
		"topStat", "packaging", "packageObject", "compilationUnit"
	};

	private static readonly string[] _LiteralNames = {
		null, "'-'", "'null'", "'.'", "','", "'this'", "'super'", "'['", "']'", 
		"'=>'", "'('", "')'", "'forSome'", "'{'", "'}'", "'type'", "'val'", "'with'", 
		"'#'", "':'", "'_'", "'*'", "'implicit'", "'if'", "'else'", "'while'", 
		"'try'", "'catch'", "'finally'", "'do'", "'for'", "'yield'", "'throw'", 
		"'return'", "'='", "'match'", "'+'", "'~'", "'!'", "'new'", "'lazy'", 
		"'<-'", "'case'", "'|'", "'@'", "'>:'", "'<:'", "'<%'", "'var'", "'override'", 
		"'abstract'", "'final'", "'sealed'", "'private'", "'protected'", "'import'", 
		"'def'", "'class'", "'object'", "'trait'", "'extends'", "'package'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "Id", "BooleanLiteral", "CharacterLiteral", "SymbolLiteral", 
		"IntegerLiteral", "StringLiteral", "FloatingPointLiteral", "Varid", "BoundVarid", 
		"Paren", "Delim", "Semi", "NL", "NEWLINE", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Scala.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ScalaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ScalaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ScalaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntegerLiteral() { return GetToken(ScalaParser.IntegerLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FloatingPointLiteral() { return GetToken(ScalaParser.FloatingPointLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BooleanLiteral() { return GetToken(ScalaParser.BooleanLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CharacterLiteral() { return GetToken(ScalaParser.CharacterLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode StringLiteral() { return GetToken(ScalaParser.StringLiteral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SymbolLiteral() { return GetToken(ScalaParser.SymbolLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 0, RULE_literal);
		int _la;
		try {
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 212;
					Match(T__0);
					}
				}

				State = 215;
				Match(IntegerLiteral);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 216;
					Match(T__0);
					}
				}

				State = 219;
				Match(FloatingPointLiteral);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 220;
				Match(BooleanLiteral);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 221;
				Match(CharacterLiteral);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 222;
				Match(StringLiteral);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 223;
				Match(SymbolLiteral);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 224;
				Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(ScalaParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(ScalaParser.Id, i);
		}
		public QualIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterQualId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitQualId(this);
		}
	}

	[RuleVersion(0)]
	public QualIdContext qualId() {
		QualIdContext _localctx = new QualIdContext(Context, State);
		EnterRule(_localctx, 2, RULE_qualId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227;
			Match(Id);
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 228;
				Match(T__2);
				State = 229;
				Match(Id);
				}
				}
				State = 234;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(ScalaParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(ScalaParser.Id, i);
		}
		public IdsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ids; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterIds(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitIds(this);
		}
	}

	[RuleVersion(0)]
	public IdsContext ids() {
		IdsContext _localctx = new IdsContext(Context, State);
		EnterRule(_localctx, 4, RULE_ids);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(Id);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 236;
				Match(T__3);
				State = 237;
				Match(Id);
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StableIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(ScalaParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(ScalaParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassQualifierContext classQualifier() {
			return GetRuleContext<ClassQualifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StableIdContext stableId() {
			return GetRuleContext<StableIdContext>(0);
		}
		public StableIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stableId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterStableId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitStableId(this);
		}
	}

	[RuleVersion(0)]
	public StableIdContext stableId() {
		return stableId(0);
	}

	private StableIdContext stableId(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StableIdContext _localctx = new StableIdContext(Context, _parentState);
		StableIdContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_stableId, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 244;
				Match(Id);
				}
				break;
			case 2:
				{
				State = 247;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Id) {
					{
					State = 245;
					Match(Id);
					State = 246;
					Match(T__2);
					}
				}

				State = 256;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__4:
					{
					State = 249;
					Match(T__4);
					}
					break;
				case T__5:
					{
					State = 250;
					Match(T__5);
					State = 252;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__6) {
						{
						State = 251;
						classQualifier();
						}
					}

					State = 254;
					Match(T__2);
					State = 255;
					Match(Id);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 265;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StableIdContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_stableId);
					State = 260;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 261;
					Match(T__2);
					State = 262;
					Match(Id);
					}
					} 
				}
				State = 267;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ClassQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		public ClassQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassQualifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassQualifierContext classQualifier() {
		ClassQualifierContext _localctx = new ClassQualifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_classQualifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__6);
			State = 269;
			Match(Id);
			State = 270;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionArgTypesContext functionArgTypes() {
			return GetRuleContext<FunctionArgTypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InfixTypeContext infixType() {
			return GetRuleContext<InfixTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistentialClauseContext existentialClause() {
			return GetRuleContext<ExistentialClauseContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 10, RULE_type_);
		int _la;
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				functionArgTypes();
				State = 273;
				Match(T__8);
				State = 274;
				type_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				infixType();
				State = 278;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__11) {
					{
					State = 277;
					existentialClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionArgTypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfixTypeContext infixType() {
			return GetRuleContext<InfixTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamTypeContext[] paramType() {
			return GetRuleContexts<ParamTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamTypeContext paramType(int i) {
			return GetRuleContext<ParamTypeContext>(i);
		}
		public FunctionArgTypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionArgTypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterFunctionArgTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitFunctionArgTypes(this);
		}
	}

	[RuleVersion(0)]
	public FunctionArgTypesContext functionArgTypes() {
		FunctionArgTypesContext _localctx = new FunctionArgTypesContext(Context, State);
		EnterRule(_localctx, 12, RULE_functionArgTypes);
		int _la;
		try {
			State = 295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				infixType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283;
				Match(T__9);
				State = 292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611686018427397728L) != 0) || _la==NL) {
					{
					State = 284;
					paramType();
					State = 289;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 285;
						Match(T__3);
						State = 286;
						paramType();
						}
						}
						State = 291;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 294;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistentialClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExistentialDclContext[] existentialDcl() {
			return GetRuleContexts<ExistentialDclContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExistentialDclContext existentialDcl(int i) {
			return GetRuleContext<ExistentialDclContext>(i);
		}
		public ExistentialClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existentialClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterExistentialClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitExistentialClause(this);
		}
	}

	[RuleVersion(0)]
	public ExistentialClauseContext existentialClause() {
		ExistentialClauseContext _localctx = new ExistentialClauseContext(Context, State);
		EnterRule(_localctx, 14, RULE_existentialClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297;
			Match(T__11);
			State = 298;
			Match(T__12);
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 299;
				existentialDcl();
				}
				}
				State = 302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__14 || _la==T__15 );
			State = 304;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistentialDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeDclContext typeDcl() {
			return GetRuleContext<TypeDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValDclContext valDcl() {
			return GetRuleContext<ValDclContext>(0);
		}
		public ExistentialDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existentialDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterExistentialDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitExistentialDcl(this);
		}
	}

	[RuleVersion(0)]
	public ExistentialDclContext existentialDcl() {
		ExistentialDclContext _localctx = new ExistentialDclContext(Context, State);
		EnterRule(_localctx, 16, RULE_existentialDcl);
		try {
			State = 310;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 306;
				Match(T__14);
				State = 307;
				typeDcl();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				Match(T__15);
				State = 309;
				valDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfixTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundTypeContext[] compoundType() {
			return GetRuleContexts<CompoundTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundTypeContext compoundType(int i) {
			return GetRuleContext<CompoundTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(ScalaParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(ScalaParser.Id, i);
		}
		public InfixTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infixType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterInfixType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitInfixType(this);
		}
	}

	[RuleVersion(0)]
	public InfixTypeContext infixType() {
		InfixTypeContext _localctx = new InfixTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_infixType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			compoundType();
			State = 317;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 313;
					Match(Id);
					State = 314;
					compoundType();
					}
					} 
				}
				State = 319;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext[] annotType() {
			return GetRuleContexts<AnnotTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext annotType(int i) {
			return GetRuleContext<AnnotTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefinementContext refinement() {
			return GetRuleContext<RefinementContext>(0);
		}
		public CompoundTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterCompoundType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitCompoundType(this);
		}
	}

	[RuleVersion(0)]
	public CompoundTypeContext compoundType() {
		CompoundTypeContext _localctx = new CompoundTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_compoundType);
		int _la;
		try {
			State = 332;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__5:
			case T__9:
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 320;
				annotType();
				State = 325;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 321;
					Match(T__16);
					State = 322;
					annotType();
					}
					}
					State = 327;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 329;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
				case 1:
					{
					State = 328;
					refinement();
					}
					break;
				}
				}
				break;
			case T__12:
			case NL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 331;
				refinement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AnnotTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterAnnotType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitAnnotType(this);
		}
	}

	[RuleVersion(0)]
	public AnnotTypeContext annotType() {
		AnnotTypeContext _localctx = new AnnotTypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_annotType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			simpleType(0);
			State = 338;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 335;
					annotation();
					}
					} 
				}
				State = 340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StableIdContext stableId() {
			return GetRuleContext<StableIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgsContext typeArgs() {
			return GetRuleContext<TypeArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext simpleType() {
		return simpleType(0);
	}

	private SimpleTypeContext simpleType(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, _parentState);
		SimpleTypeContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_simpleType, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
			case T__5:
			case Id:
				{
				State = 342;
				stableId(0);
				State = 345;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 343;
					Match(T__2);
					State = 344;
					Match(T__14);
					}
					break;
				}
				}
				break;
			case T__9:
				{
				State = 347;
				Match(T__9);
				State = 348;
				types();
				State = 349;
				Match(T__10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 360;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 358;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new SimpleTypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simpleType);
						State = 353;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 354;
						typeArgs();
						}
						break;
					case 2:
						{
						_localctx = new SimpleTypeContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simpleType);
						State = 355;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 356;
						Match(T__17);
						State = 357;
						Match(Id);
						}
						break;
					}
					} 
				}
				State = 362;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypesContext types() {
			return GetRuleContext<TypesContext>(0);
		}
		public TypeArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypeArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypeArgs(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgsContext typeArgs() {
		TypeArgsContext _localctx = new TypeArgsContext(Context, State);
		EnterRule(_localctx, 26, RULE_typeArgs);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 363;
			Match(T__6);
			State = 364;
			types();
			State = 365;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		public TypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_types; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypes(this);
		}
	}

	[RuleVersion(0)]
	public TypesContext types() {
		TypesContext _localctx = new TypesContext(Context, State);
		EnterRule(_localctx, 28, RULE_types);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367;
			type_();
			State = 372;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 368;
				Match(T__3);
				State = 369;
				type_();
				}
				}
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefinementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RefineStatContext[] refineStat() {
			return GetRuleContexts<RefineStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RefineStatContext refineStat(int i) {
			return GetRuleContext<RefineStatContext>(i);
		}
		public RefinementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refinement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterRefinement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitRefinement(this);
		}
	}

	[RuleVersion(0)]
	public RefinementContext refinement() {
		RefinementContext _localctx = new RefinementContext(Context, State);
		EnterRule(_localctx, 30, RULE_refinement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 375;
				Match(NL);
				}
			}

			State = 378;
			Match(T__12);
			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 379;
				refineStat();
				}
				}
				State = 382;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 72339069014736896L) != 0) );
			State = 384;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefineStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		public RefineStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refineStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterRefineStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitRefineStat(this);
		}
	}

	[RuleVersion(0)]
	public RefineStatContext refineStat() {
		RefineStatContext _localctx = new RefineStatContext(Context, State);
		EnterRule(_localctx, 32, RULE_refineStat);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386;
				dcl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387;
				Match(T__14);
				State = 388;
				typeDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypePatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public TypePatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typePat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypePat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypePat(this);
		}
	}

	[RuleVersion(0)]
	public TypePatContext typePat() {
		TypePatContext _localctx = new TypePatContext(Context, State);
		EnterRule(_localctx, 34, RULE_typePat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AscriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfixTypeContext infixType() {
			return GetRuleContext<InfixTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public AscriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascription; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterAscription(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitAscription(this);
		}
	}

	[RuleVersion(0)]
	public AscriptionContext ascription() {
		AscriptionContext _localctx = new AscriptionContext(Context, State);
		EnterRule(_localctx, 36, RULE_ascription);
		try {
			int _alt;
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 393;
				Match(T__18);
				State = 394;
				infixType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 395;
				Match(T__18);
				State = 397;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 396;
						annotation();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 399;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 401;
				Match(T__18);
				State = 402;
				Match(T__19);
				State = 403;
				Match(T__20);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingsContext bindings() {
			return GetRuleContext<BindingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 38, RULE_expr);
		int _la;
		try {
			State = 417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 406;
					bindings();
					}
					break;
				case T__21:
				case Id:
					{
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__21) {
						{
						State = 407;
						Match(T__21);
						}
					}

					State = 410;
					Match(Id);
					}
					break;
				case T__19:
					{
					State = 411;
					Match(T__19);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 414;
				Match(T__8);
				State = 415;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416;
				expr1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumeratorsContext enumerators() {
			return GetRuleContext<EnumeratorsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpr1Context simpleExpr1() {
			return GetRuleContext<SimpleExpr1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext argumentExprs() {
			return GetRuleContext<ArgumentExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AscriptionContext ascription() {
			return GetRuleContext<AscriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses() {
			return GetRuleContext<CaseClausesContext>(0);
		}
		public Expr1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterExpr1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitExpr1(this);
		}
	}

	[RuleVersion(0)]
	public Expr1Context expr1() {
		Expr1Context _localctx = new Expr1Context(Context, State);
		EnterRule(_localctx, 40, RULE_expr1);
		int _la;
		try {
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419;
				Match(T__22);
				State = 420;
				Match(T__9);
				State = 421;
				expr();
				State = 422;
				Match(T__10);
				State = 426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 423;
					Match(NL);
					}
					}
					State = 428;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 429;
				expr();
				State = 432;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 430;
					Match(T__23);
					State = 431;
					expr();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 434;
				Match(T__24);
				State = 435;
				Match(T__9);
				State = 436;
				expr();
				State = 437;
				Match(T__10);
				State = 441;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 438;
					Match(NL);
					}
					}
					State = 443;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 444;
				expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 446;
				Match(T__25);
				State = 447;
				expr();
				State = 450;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 448;
					Match(T__26);
					State = 449;
					expr();
					}
					break;
				}
				State = 454;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 452;
					Match(T__27);
					State = 453;
					expr();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 456;
				Match(T__28);
				State = 457;
				expr();
				State = 458;
				Match(T__24);
				State = 459;
				Match(T__9);
				State = 460;
				expr();
				State = 461;
				Match(T__10);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 463;
				Match(T__29);
				State = 472;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 464;
					Match(T__9);
					State = 465;
					enumerators();
					State = 466;
					Match(T__10);
					}
					break;
				case T__12:
					{
					State = 468;
					Match(T__12);
					State = 469;
					enumerators();
					State = 470;
					Match(T__13);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__30) {
					{
					State = 474;
					Match(T__30);
					}
				}

				State = 477;
				expr();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 479;
				Match(T__31);
				State = 480;
				expr();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 481;
				Match(T__32);
				State = 483;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 482;
					expr();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 494;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
				case 1:
					{
					State = 490;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
					case 1:
						{
						State = 485;
						simpleExpr();
						}
						break;
					case 2:
						{
						State = 486;
						simpleExpr1(0);
						State = 488;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__19) {
							{
							State = 487;
							Match(T__19);
							}
						}

						}
						break;
					}
					State = 492;
					Match(T__2);
					}
					break;
				}
				State = 496;
				Match(Id);
				State = 497;
				Match(T__33);
				State = 498;
				expr();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 499;
				simpleExpr1(0);
				State = 500;
				argumentExprs();
				State = 501;
				Match(T__33);
				State = 502;
				expr();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 504;
				postfixExpr();
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 505;
					ascription();
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 508;
				postfixExpr();
				State = 509;
				Match(T__34);
				State = 510;
				Match(T__12);
				State = 511;
				caseClauses();
				State = 512;
				Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrefixDefContext : ParserRuleContext {
		public PrefixDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPrefixDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPrefixDef(this);
		}
	}

	[RuleVersion(0)]
	public PrefixDefContext prefixDef() {
		PrefixDefContext _localctx = new PrefixDefContext(Context, State);
		EnterRule(_localctx, 42, RULE_prefixDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 481036337154L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InfixExprContext infixExpr() {
			return GetRuleContext<InfixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrefixDefContext[] prefixDef() {
			return GetRuleContexts<PrefixDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixDefContext prefixDef(int i) {
			return GetRuleContext<PrefixDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpr1Context[] simpleExpr1() {
			return GetRuleContexts<SimpleExpr1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpr1Context simpleExpr1(int i) {
			return GetRuleContext<SimpleExpr1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		public PostfixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPostfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPostfixExpr(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExprContext postfixExpr() {
		PostfixExprContext _localctx = new PostfixExprContext(Context, State);
		EnterRule(_localctx, 44, RULE_postfixExpr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			infixExpr(0);
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 519;
				Match(Id);
				}
				break;
			}
			State = 527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 522;
					prefixDef();
					State = 523;
					simpleExpr1(0);
					}
					} 
				}
				State = 529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 530;
				Match(NL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InfixExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrefixExprContext prefixExpr() {
			return GetRuleContext<PrefixExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InfixExprContext[] infixExpr() {
			return GetRuleContexts<InfixExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InfixExprContext infixExpr(int i) {
			return GetRuleContext<InfixExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		public InfixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_infixExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterInfixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitInfixExpr(this);
		}
	}

	[RuleVersion(0)]
	public InfixExprContext infixExpr() {
		return infixExpr(0);
	}

	private InfixExprContext infixExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InfixExprContext _localctx = new InfixExprContext(Context, _parentState);
		InfixExprContext _prevctx = _localctx;
		int _startState = 46;
		EnterRecursionRule(_localctx, 46, RULE_infixExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 534;
			prefixExpr();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 544;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InfixExprContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_infixExpr);
					State = 536;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 537;
					Match(Id);
					State = 539;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL) {
						{
						State = 538;
						Match(NL);
						}
					}

					State = 541;
					infixExpr(2);
					}
					} 
				}
				State = 546;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,52,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrefixExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpr1Context simpleExpr1() {
			return GetRuleContext<SimpleExpr1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrefixDefContext prefixDef() {
			return GetRuleContext<PrefixDefContext>(0);
		}
		public PrefixExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prefixExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPrefixExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPrefixExpr(this);
		}
	}

	[RuleVersion(0)]
	public PrefixExprContext prefixExpr() {
		PrefixExprContext _localctx = new PrefixExprContext(Context, State);
		EnterRule(_localctx, 48, RULE_prefixExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 547;
				prefixDef();
				}
				break;
			}
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				{
				State = 550;
				simpleExpr();
				}
				break;
			case 2:
				{
				State = 551;
				simpleExpr1(0);
				State = 553;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
				case 1:
					{
					State = 552;
					Match(T__19);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTemplateContext classTemplate() {
			return GetRuleContext<ClassTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterSimpleExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitSimpleExpr(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		SimpleExprContext _localctx = new SimpleExprContext(Context, State);
		EnterRule(_localctx, 50, RULE_simpleExpr);
		try {
			State = 563;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__38:
				EnterOuterAlt(_localctx, 1);
				{
				State = 557;
				Match(T__38);
				State = 560;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
				case 1:
					{
					State = 558;
					classTemplate();
					}
					break;
				case 2:
					{
					State = 559;
					templateBody();
					}
					break;
				}
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562;
				blockExpr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExpr1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StableIdContext stableId() {
			return GetRuleContext<StableIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeArgsContext typeArgs() {
			return GetRuleContext<TypeArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExpr1Context simpleExpr1() {
			return GetRuleContext<SimpleExpr1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext argumentExprs() {
			return GetRuleContext<ArgumentExprsContext>(0);
		}
		public SimpleExpr1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterSimpleExpr1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitSimpleExpr1(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExpr1Context simpleExpr1() {
		return simpleExpr1(0);
	}

	private SimpleExpr1Context simpleExpr1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExpr1Context _localctx = new SimpleExpr1Context(Context, _parentState);
		SimpleExpr1Context _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_simpleExpr1, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 566;
				literal();
				}
				break;
			case 2:
				{
				State = 567;
				stableId(0);
				}
				break;
			case 3:
				{
				State = 568;
				Match(T__19);
				}
				break;
			case 4:
				{
				State = 569;
				Match(T__9);
				State = 571;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611684973025418138L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0)) {
					{
					State = 570;
					exprs();
					}
				}

				State = 573;
				Match(T__10);
				}
				break;
			case 5:
				{
				State = 574;
				simpleExpr();
				State = 575;
				Match(T__2);
				State = 576;
				Match(Id);
				}
				break;
			case 6:
				{
				State = 578;
				simpleExpr();
				State = 579;
				typeArgs();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 598;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 596;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
					case 1:
						{
						_localctx = new SimpleExpr1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr1);
						State = 583;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 585;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__19) {
							{
							State = 584;
							Match(T__19);
							}
						}

						State = 587;
						Match(T__2);
						State = 588;
						Match(Id);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExpr1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr1);
						State = 589;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 591;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__19) {
							{
							State = 590;
							Match(T__19);
							}
						}

						State = 593;
						typeArgs();
						}
						break;
					case 3:
						{
						_localctx = new SimpleExpr1Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr1);
						State = 594;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 595;
						argumentExprs();
						}
						break;
					}
					} 
				}
				State = 600;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitExprs(this);
		}
	}

	[RuleVersion(0)]
	public ExprsContext exprs() {
		ExprsContext _localctx = new ExprsContext(Context, State);
		EnterRule(_localctx, 54, RULE_exprs);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 601;
			expr();
			State = 606;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 602;
					Match(T__3);
					State = 603;
					expr();
					}
					} 
				}
				State = 608;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentExprsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgsContext args() {
			return GetRuleContext<ArgsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockExprContext blockExpr() {
			return GetRuleContext<BlockExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		public ArgumentExprsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentExprs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterArgumentExprs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitArgumentExprs(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentExprsContext argumentExprs() {
		ArgumentExprsContext _localctx = new ArgumentExprsContext(Context, State);
		EnterRule(_localctx, 56, RULE_argumentExprs);
		int _la;
		try {
			State = 621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609;
				Match(T__9);
				State = 610;
				args();
				State = 611;
				Match(T__10);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 613;
				Match(T__12);
				State = 614;
				args();
				State = 615;
				Match(T__13);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 617;
					Match(NL);
					}
				}

				State = 620;
				blockExpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprsContext exprs() {
			return GetRuleContext<ExprsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public ArgsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_args; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterArgs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitArgs(this);
		}
	}

	[RuleVersion(0)]
	public ArgsContext args() {
		ArgsContext _localctx = new ArgsContext(Context, State);
		EnterRule(_localctx, 58, RULE_args);
		int _la;
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611684973025418138L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0)) {
					{
					State = 623;
					exprs();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 629;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
				case 1:
					{
					State = 626;
					exprs();
					State = 627;
					Match(T__3);
					}
					break;
				}
				State = 631;
				postfixExpr();
				State = 633;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) {
					{
					State = 632;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClausesContext caseClauses() {
			return GetRuleContext<CaseClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public BlockExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterBlockExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitBlockExpr(this);
		}
	}

	[RuleVersion(0)]
	public BlockExprContext blockExpr() {
		BlockExprContext _localctx = new BlockExprContext(Context, State);
		EnterRule(_localctx, 60, RULE_blockExpr);
		try {
			State = 645;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 637;
				Match(T__12);
				State = 638;
				caseClauses();
				State = 639;
				Match(T__13);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 641;
				Match(T__12);
				State = 642;
				block();
				State = 643;
				Match(T__13);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatContext[] blockStat() {
			return GetRuleContexts<BlockStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatContext blockStat(int i) {
			return GetRuleContext<BlockStatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResultExprContext resultExpr() {
			return GetRuleContext<ResultExprContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 62, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 648;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 647;
					blockStat();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 650;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,72,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611684973025418138L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0)) {
				{
				State = 652;
				resultExpr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context import_() {
			return GetRuleContext<Import_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_Context def_() {
			return GetRuleContext<Def_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TmplDefContext tmplDef() {
			return GetRuleContext<TmplDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalModifierContext[] localModifier() {
			return GetRuleContexts<LocalModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LocalModifierContext localModifier(int i) {
			return GetRuleContext<LocalModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public BlockStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterBlockStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitBlockStat(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatContext blockStat() {
		BlockStatContext _localctx = new BlockStatContext(Context, State);
		EnterRule(_localctx, 64, RULE_blockStat);
		int _la;
		try {
			State = 680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 655;
				import_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__43) {
					{
					{
					State = 656;
					annotation();
					}
					}
					State = 661;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 663;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__21 || _la==T__39) {
					{
					State = 662;
					_la = TokenStream.LA(1);
					if ( !(_la==T__21 || _la==T__39) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 665;
				def_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__43) {
					{
					{
					State = 666;
					annotation();
					}
					}
					State = 671;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 675;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 7882398863720448L) != 0)) {
					{
					{
					State = 672;
					localModifier();
					}
					}
					State = 677;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 678;
				tmplDef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 679;
				expr1();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResultExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingsContext bindings() {
			return GetRuleContext<BindingsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundTypeContext compoundType() {
			return GetRuleContext<CompoundTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		public ResultExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resultExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterResultExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitResultExpr(this);
		}
	}

	[RuleVersion(0)]
	public ResultExprContext resultExpr() {
		ResultExprContext _localctx = new ResultExprContext(Context, State);
		EnterRule(_localctx, 66, RULE_resultExpr);
		int _la;
		try {
			State = 698;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 682;
				expr1();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 693;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__9:
					{
					State = 683;
					bindings();
					}
					break;
				case T__19:
				case T__21:
				case Id:
					{
					State = 689;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__21:
					case Id:
						{
						State = 685;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==T__21) {
							{
							State = 684;
							Match(T__21);
							}
						}

						State = 687;
						Match(Id);
						}
						break;
					case T__19:
						{
						State = 688;
						Match(T__19);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 691;
					Match(T__18);
					State = 692;
					compoundType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 695;
				Match(T__8);
				State = 696;
				block();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorContext[] generator() {
			return GetRuleContexts<GeneratorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneratorContext generator(int i) {
			return GetRuleContext<GeneratorContext>(i);
		}
		public EnumeratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerators; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterEnumerators(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitEnumerators(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorsContext enumerators() {
		EnumeratorsContext _localctx = new EnumeratorsContext(Context, State);
		EnterRule(_localctx, 68, RULE_enumerators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 700;
				generator();
				}
				}
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018426338202L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 127L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneratorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pattern1Context[] pattern1() {
			return GetRuleContexts<Pattern1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pattern1Context pattern1(int i) {
			return GetRuleContext<Pattern1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Guard_Context[] guard_() {
			return GetRuleContexts<Guard_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Guard_Context guard_(int i) {
			return GetRuleContext<Guard_Context>(i);
		}
		public GeneratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterGenerator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitGenerator(this);
		}
	}

	[RuleVersion(0)]
	public GeneratorContext generator() {
		GeneratorContext _localctx = new GeneratorContext(Context, State);
		EnterRule(_localctx, 70, RULE_generator);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 705;
			pattern1();
			State = 706;
			Match(T__40);
			State = 707;
			expr();
			State = 715;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 713;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__22:
						{
						State = 708;
						guard_();
						}
						break;
					case T__0:
					case T__1:
					case T__4:
					case T__5:
					case T__9:
					case T__19:
					case Id:
					case BooleanLiteral:
					case CharacterLiteral:
					case SymbolLiteral:
					case IntegerLiteral:
					case StringLiteral:
					case FloatingPointLiteral:
					case Varid:
					case BoundVarid:
						{
						State = 709;
						pattern1();
						State = 710;
						Match(T__33);
						State = 711;
						expr();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 717;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 72, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 718;
				caseClause();
				}
				}
				State = 721;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__41 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Guard_Context guard_() {
			return GetRuleContext<Guard_Context>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 74, RULE_caseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 723;
			Match(T__41);
			State = 724;
			pattern();
			State = 726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 725;
				guard_();
				}
			}

			State = 728;
			Match(T__8);
			State = 729;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Guard_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PostfixExprContext postfixExpr() {
			return GetRuleContext<PostfixExprContext>(0);
		}
		public Guard_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guard_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterGuard_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitGuard_(this);
		}
	}

	[RuleVersion(0)]
	public Guard_Context guard_() {
		Guard_Context _localctx = new Guard_Context(Context, State);
		EnterRule(_localctx, 76, RULE_guard_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 731;
			Match(T__22);
			State = 732;
			postfixExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pattern1Context[] pattern1() {
			return GetRuleContexts<Pattern1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pattern1Context pattern1(int i) {
			return GetRuleContext<Pattern1Context>(i);
		}
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 78, RULE_pattern);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			pattern1();
			State = 739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__42) {
				{
				{
				State = 735;
				Match(T__42);
				State = 736;
				pattern1();
				}
				}
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypePatContext typePat() {
			return GetRuleContext<TypePatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BoundVarid() { return GetToken(ScalaParser.BoundVarid, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern2Context pattern2() {
			return GetRuleContext<Pattern2Context>(0);
		}
		public Pattern1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPattern1(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPattern1(this);
		}
	}

	[RuleVersion(0)]
	public Pattern1Context pattern1() {
		Pattern1Context _localctx = new Pattern1Context(Context, State);
		EnterRule(_localctx, 80, RULE_pattern1);
		int _la;
		try {
			State = 746;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & 1130297953353729L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 743;
				Match(T__18);
				State = 744;
				typePat();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 745;
				pattern2();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Pattern3Context pattern3() {
			return GetRuleContext<Pattern3Context>(0);
		}
		public Pattern2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPattern2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPattern2(this);
		}
	}

	[RuleVersion(0)]
	public Pattern2Context pattern2() {
		Pattern2Context _localctx = new Pattern2Context(Context, State);
		EnterRule(_localctx, 82, RULE_pattern2);
		int _la;
		try {
			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 748;
				Match(Id);
				State = 751;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__43) {
					{
					State = 749;
					Match(T__43);
					State = 750;
					pattern3();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 753;
				pattern3();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pattern3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimplePatternContext[] simplePattern() {
			return GetRuleContexts<SimplePatternContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimplePatternContext simplePattern(int i) {
			return GetRuleContext<SimplePatternContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(ScalaParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(ScalaParser.Id, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		public Pattern3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPattern3(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPattern3(this);
		}
	}

	[RuleVersion(0)]
	public Pattern3Context pattern3() {
		Pattern3Context _localctx = new Pattern3Context(Context, State);
		EnterRule(_localctx, 84, RULE_pattern3);
		int _la;
		try {
			State = 768;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 756;
				simplePattern();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 757;
				simplePattern();
				State = 765;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Id) {
					{
					{
					State = 758;
					Match(Id);
					State = 760;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL) {
						{
						State = 759;
						Match(NL);
						}
					}

					State = 762;
					simplePattern();
					}
					}
					State = 767;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimplePatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Varid() { return GetToken(ScalaParser.Varid, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StableIdContext stableId() {
			return GetRuleContext<StableIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		public SimplePatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simplePattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterSimplePattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitSimplePattern(this);
		}
	}

	[RuleVersion(0)]
	public SimplePatternContext simplePattern() {
		SimplePatternContext _localctx = new SimplePatternContext(Context, State);
		EnterRule(_localctx, 86, RULE_simplePattern);
		int _la;
		try {
			State = 801;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 770;
				Match(T__19);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 771;
				Match(Varid);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 772;
				literal();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773;
				stableId(0);
				State = 779;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 774;
					Match(T__9);
					State = 776;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018426338202L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 127L) != 0)) {
						{
						State = 775;
						patterns();
						}
					}

					State = 778;
					Match(T__10);
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 781;
				stableId(0);
				State = 782;
				Match(T__9);
				State = 786;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 783;
					patterns();
					State = 784;
					Match(T__3);
					}
					break;
				}
				State = 790;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Id) {
					{
					State = 788;
					Match(Id);
					State = 789;
					Match(T__43);
					}
				}

				State = 792;
				Match(T__19);
				State = 793;
				Match(T__20);
				State = 794;
				Match(T__10);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 796;
				Match(T__9);
				State = 798;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -4611686018426338202L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 127L) != 0)) {
					{
					State = 797;
					patterns();
					}
				}

				State = 800;
				Match(T__10);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PatternsContext patterns() {
			return GetRuleContext<PatternsContext>(0);
		}
		public PatternsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patterns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPatterns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPatterns(this);
		}
	}

	[RuleVersion(0)]
	public PatternsContext patterns() {
		PatternsContext _localctx = new PatternsContext(Context, State);
		EnterRule(_localctx, 88, RULE_patterns);
		try {
			State = 810;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 803;
				pattern();
				State = 806;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
				case 1:
					{
					State = 804;
					Match(T__3);
					State = 805;
					patterns();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 808;
				Match(T__19);
				State = 809;
				Match(T__20);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantTypeParamContext[] variantTypeParam() {
			return GetRuleContexts<VariantTypeParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariantTypeParamContext variantTypeParam(int i) {
			return GetRuleContext<VariantTypeParamContext>(i);
		}
		public TypeParamClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParamClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypeParamClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypeParamClause(this);
		}
	}

	[RuleVersion(0)]
	public TypeParamClauseContext typeParamClause() {
		TypeParamClauseContext _localctx = new TypeParamClauseContext(Context, State);
		EnterRule(_localctx, 90, RULE_typeParamClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812;
			Match(T__6);
			State = 813;
			variantTypeParam();
			State = 818;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 814;
				Match(T__3);
				State = 815;
				variantTypeParam();
				}
				}
				State = 820;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 821;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunTypeParamClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamContext[] typeParam() {
			return GetRuleContexts<TypeParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamContext typeParam(int i) {
			return GetRuleContext<TypeParamContext>(i);
		}
		public FunTypeParamClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funTypeParamClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterFunTypeParamClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitFunTypeParamClause(this);
		}
	}

	[RuleVersion(0)]
	public FunTypeParamClauseContext funTypeParamClause() {
		FunTypeParamClauseContext _localctx = new FunTypeParamClauseContext(Context, State);
		EnterRule(_localctx, 92, RULE_funTypeParamClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 823;
			Match(T__6);
			State = 824;
			typeParam();
			State = 829;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 825;
				Match(T__3);
				State = 826;
				typeParam();
				}
				}
				State = 831;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 832;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamContext typeParam() {
			return GetRuleContext<TypeParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public VariantTypeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterVariantTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitVariantTypeParam(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParamContext variantTypeParam() {
		VariantTypeParamContext _localctx = new VariantTypeParamContext(Context, State);
		EnterRule(_localctx, 94, RULE_variantTypeParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43) {
				{
				{
				State = 834;
				annotation();
				}
				}
				State = 839;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 841;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0 || _la==T__35) {
				{
				State = 840;
				_la = TokenStream.LA(1);
				if ( !(_la==T__0 || _la==T__35) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 843;
			typeParam();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamClauseContext typeParamClause() {
			return GetRuleContext<TypeParamClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		public TypeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypeParam(this);
		}
	}

	[RuleVersion(0)]
	public TypeParamContext typeParam() {
		TypeParamContext _localctx = new TypeParamContext(Context, State);
		EnterRule(_localctx, 96, RULE_typeParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 845;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==Id) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 847;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 846;
				typeParamClause();
				}
			}

			State = 851;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 849;
				Match(T__44);
				State = 850;
				type_();
				}
			}

			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__45) {
				{
				State = 853;
				Match(T__45);
				State = 854;
				type_();
				}
			}

			State = 861;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__46) {
				{
				{
				State = 857;
				Match(T__46);
				State = 858;
				type_();
				}
				}
				State = 863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 868;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__18) {
				{
				{
				State = 864;
				Match(T__18);
				State = 865;
				type_();
				}
				}
				State = 870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamClauseContext[] paramClause() {
			return GetRuleContexts<ParamClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamClauseContext paramClause(int i) {
			return GetRuleContext<ParamClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		public ParamClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterParamClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitParamClauses(this);
		}
	}

	[RuleVersion(0)]
	public ParamClausesContext paramClauses() {
		ParamClausesContext _localctx = new ParamClausesContext(Context, State);
		EnterRule(_localctx, 98, RULE_paramClauses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 874;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 871;
					paramClause();
					}
					} 
				}
				State = 876;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			State = 885;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 877;
					Match(NL);
					}
				}

				State = 880;
				Match(T__9);
				State = 881;
				Match(T__21);
				State = 882;
				@params();
				State = 883;
				Match(T__10);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamsContext @params() {
			return GetRuleContext<ParamsContext>(0);
		}
		public ParamClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterParamClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitParamClause(this);
		}
	}

	[RuleVersion(0)]
	public ParamClauseContext paramClause() {
		ParamClauseContext _localctx = new ParamClauseContext(Context, State);
		EnterRule(_localctx, 100, RULE_paramClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 887;
				Match(NL);
				}
			}

			State = 890;
			Match(T__9);
			State = 892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43 || _la==Id) {
				{
				State = 891;
				@params();
				}
			}

			State = 894;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public ParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_params; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitParams(this);
		}
	}

	[RuleVersion(0)]
	public ParamsContext @params() {
		ParamsContext _localctx = new ParamsContext(Context, State);
		EnterRule(_localctx, 102, RULE_params);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 896;
			param();
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 897;
				Match(T__3);
				State = 898;
				param();
				}
				}
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamTypeContext paramType() {
			return GetRuleContext<ParamTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitParam(this);
		}
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 104, RULE_param);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43) {
				{
				{
				State = 904;
				annotation();
				}
				}
				State = 909;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 910;
			Match(Id);
			State = 913;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 911;
				Match(T__18);
				State = 912;
				paramType();
				}
			}

			State = 917;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 915;
				Match(T__33);
				State = 916;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ParamTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterParamType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitParamType(this);
		}
	}

	[RuleVersion(0)]
	public ParamTypeContext paramType() {
		ParamTypeContext _localctx = new ParamTypeContext(Context, State);
		EnterRule(_localctx, 106, RULE_paramType);
		try {
			State = 925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 919;
				type_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 920;
				Match(T__8);
				State = 921;
				type_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 922;
				type_();
				State = 923;
				Match(T__20);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParamClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamClauseContext[] classParamClause() {
			return GetRuleContexts<ClassParamClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamClauseContext classParamClause(int i) {
			return GetRuleContext<ClassParamClauseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamsContext classParams() {
			return GetRuleContext<ClassParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		public ClassParamClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParamClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassParamClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassParamClauses(this);
		}
	}

	[RuleVersion(0)]
	public ClassParamClausesContext classParamClauses() {
		ClassParamClausesContext _localctx = new ClassParamClausesContext(Context, State);
		EnterRule(_localctx, 108, RULE_classParamClauses);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 930;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 927;
					classParamClause();
					}
					} 
				}
				State = 932;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			State = 941;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 934;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 933;
					Match(NL);
					}
				}

				State = 936;
				Match(T__9);
				State = 937;
				Match(T__21);
				State = 938;
				classParams();
				State = 939;
				Match(T__10);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParamClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamsContext classParams() {
			return GetRuleContext<ClassParamsContext>(0);
		}
		public ClassParamClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParamClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassParamClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassParamClause(this);
		}
	}

	[RuleVersion(0)]
	public ClassParamClauseContext classParamClause() {
		ClassParamClauseContext _localctx = new ClassParamClauseContext(Context, State);
		EnterRule(_localctx, 110, RULE_classParamClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 944;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 943;
				Match(NL);
				}
			}

			State = 946;
			Match(T__9);
			State = 948;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4647452032171573248L) != 0)) {
				{
				State = 947;
				classParams();
				}
			}

			State = 950;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamContext[] classParam() {
			return GetRuleContexts<ClassParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamContext classParam(int i) {
			return GetRuleContext<ClassParamContext>(i);
		}
		public ClassParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassParams(this);
		}
	}

	[RuleVersion(0)]
	public ClassParamsContext classParams() {
		ClassParamsContext _localctx = new ClassParamsContext(Context, State);
		EnterRule(_localctx, 112, RULE_classParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952;
			classParam();
			State = 957;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 953;
				Match(T__3);
				State = 954;
				classParam();
				}
				}
				State = 959;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamTypeContext paramType() {
			return GetRuleContext<ParamTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ClassParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassParam(this);
		}
	}

	[RuleVersion(0)]
	public ClassParamContext classParam() {
		ClassParamContext _localctx = new ClassParamContext(Context, State);
		EnterRule(_localctx, 114, RULE_classParam);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43) {
				{
				{
				State = 960;
				annotation();
				}
				}
				State = 965;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 969;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35466946581364736L) != 0)) {
				{
				{
				State = 966;
				modifier();
				}
				}
				State = 971;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 973;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15 || _la==T__47) {
				{
				State = 972;
				_la = TokenStream.LA(1);
				if ( !(_la==T__15 || _la==T__47) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 975;
			Match(Id);
			State = 976;
			Match(T__18);
			State = 977;
			paramType();
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__33) {
				{
				State = 978;
				Match(T__33);
				State = 979;
				expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext[] binding() {
			return GetRuleContexts<BindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindingContext binding(int i) {
			return GetRuleContext<BindingContext>(i);
		}
		public BindingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindings; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterBindings(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitBindings(this);
		}
	}

	[RuleVersion(0)]
	public BindingsContext bindings() {
		BindingsContext _localctx = new BindingsContext(Context, State);
		EnterRule(_localctx, 116, RULE_bindings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 982;
			Match(T__9);
			State = 983;
			binding();
			State = 988;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 984;
				Match(T__3);
				State = 985;
				binding();
				}
				}
				State = 990;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 991;
			Match(T__10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public BindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterBinding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitBinding(this);
		}
	}

	[RuleVersion(0)]
	public BindingContext binding() {
		BindingContext _localctx = new BindingContext(Context, State);
		EnterRule(_localctx, 118, RULE_binding);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			_la = TokenStream.LA(1);
			if ( !(_la==T__19 || _la==Id) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 994;
				Match(T__18);
				State = 995;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LocalModifierContext localModifier() {
			return GetRuleContext<LocalModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 120, RULE_modifier);
		try {
			State = 1001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
			case T__39:
			case T__49:
			case T__50:
			case T__51:
				EnterOuterAlt(_localctx, 1);
				{
				State = 998;
				localModifier();
				}
				break;
			case T__52:
			case T__53:
				EnterOuterAlt(_localctx, 2);
				{
				State = 999;
				accessModifier();
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1000;
				Match(T__48);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalModifierContext : ParserRuleContext {
		public LocalModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterLocalModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitLocalModifier(this);
		}
	}

	[RuleVersion(0)]
	public LocalModifierContext localModifier() {
		LocalModifierContext _localctx = new LocalModifierContext(Context, State);
		EnterRule(_localctx, 122, RULE_localModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7882398863720448L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessQualifierContext accessQualifier() {
			return GetRuleContext<AccessQualifierContext>(0);
		}
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 124, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1005;
			_la = TokenStream.LA(1);
			if ( !(_la==T__52 || _la==T__53) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1007;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1006;
				accessQualifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessQualifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		public AccessQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessQualifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterAccessQualifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitAccessQualifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessQualifierContext accessQualifier() {
		AccessQualifierContext _localctx = new AccessQualifierContext(Context, State);
		EnterRule(_localctx, 126, RULE_accessQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1009;
			Match(T__6);
			State = 1010;
			_la = TokenStream.LA(1);
			if ( !(_la==T__4 || _la==Id) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1011;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext[] argumentExprs() {
			return GetRuleContexts<ArgumentExprsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext argumentExprs(int i) {
			return GetRuleContext<ArgumentExprsContext>(i);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 128, RULE_annotation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			Match(T__43);
			State = 1014;
			simpleType(0);
			State = 1018;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1015;
					argumentExprs();
					}
					} 
				}
				State = 1020;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrAnnotationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext argumentExprs() {
			return GetRuleContext<ArgumentExprsContext>(0);
		}
		public ConstrAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrAnnotation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterConstrAnnotation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitConstrAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public ConstrAnnotationContext constrAnnotation() {
		ConstrAnnotationContext _localctx = new ConstrAnnotationContext(Context, State);
		EnterRule(_localctx, 130, RULE_constrAnnotation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1021;
			Match(T__43);
			State = 1022;
			simpleType(0);
			State = 1023;
			argumentExprs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelfTypeContext selfType() {
			return GetRuleContext<SelfTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStatContext[] templateStat() {
			return GetRuleContexts<TemplateStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateStatContext templateStat(int i) {
			return GetRuleContext<TemplateStatContext>(i);
		}
		public TemplateBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTemplateBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTemplateBody(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBodyContext templateBody() {
		TemplateBodyContext _localctx = new TemplateBodyContext(Context, State);
		EnterRule(_localctx, 132, RULE_templateBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 1025;
				Match(NL);
				}
			}

			State = 1028;
			Match(T__12);
			State = 1030;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				{
				State = 1029;
				selfType();
				}
				break;
			}
			State = 1033;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1032;
				templateStat();
				}
				}
				State = 1035;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -3459021853651000218L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0) );
			State = 1037;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context import_() {
			return GetRuleContext<Import_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Def_Context def_() {
			return GetRuleContext<Def_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DclContext dcl() {
			return GetRuleContext<DclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TemplateStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTemplateStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTemplateStat(this);
		}
	}

	[RuleVersion(0)]
	public TemplateStatContext templateStat() {
		TemplateStatContext _localctx = new TemplateStatContext(Context, State);
		EnterRule(_localctx, 134, RULE_templateStat);
		int _la;
		try {
			State = 1073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1039;
				import_();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1046;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__43) {
					{
					{
					State = 1040;
					annotation();
					State = 1042;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL) {
						{
						State = 1041;
						Match(NL);
						}
					}

					}
					}
					State = 1048;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35466946581364736L) != 0)) {
					{
					{
					State = 1049;
					modifier();
					}
					}
					State = 1054;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1055;
				def_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1062;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__43) {
					{
					{
					State = 1056;
					annotation();
					State = 1058;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL) {
						{
						State = 1057;
						Match(NL);
						}
					}

					}
					}
					State = 1064;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35466946581364736L) != 0)) {
					{
					{
					State = 1065;
					modifier();
					}
					}
					State = 1070;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1071;
				dcl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1072;
				expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public SelfTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterSelfType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitSelfType(this);
		}
	}

	[RuleVersion(0)]
	public SelfTypeContext selfType() {
		SelfTypeContext _localctx = new SelfTypeContext(Context, State);
		EnterRule(_localctx, 136, RULE_selfType);
		int _la;
		try {
			State = 1086;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075;
				Match(Id);
				State = 1078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 1076;
					Match(T__18);
					State = 1077;
					type_();
					}
				}

				State = 1080;
				Match(T__8);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				Match(T__4);
				State = 1082;
				Match(T__18);
				State = 1083;
				type_();
				State = 1084;
				Match(T__8);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportExprContext[] importExpr() {
			return GetRuleContexts<ImportExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportExprContext importExpr(int i) {
			return GetRuleContext<ImportExprContext>(i);
		}
		public Import_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterImport_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitImport_(this);
		}
	}

	[RuleVersion(0)]
	public Import_Context import_() {
		Import_Context _localctx = new Import_Context(Context, State);
		EnterRule(_localctx, 138, RULE_import_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1088;
			Match(T__54);
			State = 1089;
			importExpr();
			State = 1094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1090;
				Match(T__3);
				State = 1091;
				importExpr();
				}
				}
				State = 1096;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StableIdContext stableId() {
			return GetRuleContext<StableIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ImportSelectorsContext importSelectors() {
			return GetRuleContext<ImportSelectorsContext>(0);
		}
		public ImportExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterImportExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitImportExpr(this);
		}
	}

	[RuleVersion(0)]
	public ImportExprContext importExpr() {
		ImportExprContext _localctx = new ImportExprContext(Context, State);
		EnterRule(_localctx, 140, RULE_importExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1097;
			stableId(0);
			State = 1104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 1098;
				Match(T__2);
				State = 1102;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Id:
					{
					State = 1099;
					Match(Id);
					}
					break;
				case T__19:
					{
					State = 1100;
					Match(T__19);
					}
					break;
				case T__12:
					{
					State = 1101;
					importSelectors();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSelectorsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ImportSelectorContext[] importSelector() {
			return GetRuleContexts<ImportSelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportSelectorContext importSelector(int i) {
			return GetRuleContext<ImportSelectorContext>(i);
		}
		public ImportSelectorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSelectors; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterImportSelectors(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitImportSelectors(this);
		}
	}

	[RuleVersion(0)]
	public ImportSelectorsContext importSelectors() {
		ImportSelectorsContext _localctx = new ImportSelectorsContext(Context, State);
		EnterRule(_localctx, 142, RULE_importSelectors);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1106;
			Match(T__12);
			State = 1112;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1107;
					importSelector();
					State = 1108;
					Match(T__3);
					}
					} 
				}
				State = 1114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,152,Context);
			}
			State = 1117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Id:
				{
				State = 1115;
				importSelector();
				}
				break;
			case T__19:
				{
				State = 1116;
				Match(T__19);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1119;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Id() { return GetTokens(ScalaParser.Id); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id(int i) {
			return GetToken(ScalaParser.Id, i);
		}
		public ImportSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterImportSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitImportSelector(this);
		}
	}

	[RuleVersion(0)]
	public ImportSelectorContext importSelector() {
		ImportSelectorContext _localctx = new ImportSelectorContext(Context, State);
		EnterRule(_localctx, 144, RULE_importSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121;
			Match(Id);
			State = 1124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 1122;
				Match(T__8);
				State = 1123;
				_la = TokenStream.LA(1);
				if ( !(_la==T__19 || _la==Id) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValDclContext valDcl() {
			return GetRuleContext<ValDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDclContext varDcl() {
			return GetRuleContext<VarDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunDclContext funDcl() {
			return GetRuleContext<FunDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDclContext typeDcl() {
			return GetRuleContext<TypeDclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		public DclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitDcl(this);
		}
	}

	[RuleVersion(0)]
	public DclContext dcl() {
		DclContext _localctx = new DclContext(Context, State);
		EnterRule(_localctx, 146, RULE_dcl);
		int _la;
		try {
			State = 1140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1126;
				Match(T__15);
				State = 1127;
				valDcl();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1128;
				Match(T__47);
				State = 1129;
				varDcl();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1130;
				Match(T__55);
				State = 1131;
				funDcl();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1132;
				Match(T__14);
				State = 1136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1133;
					Match(NL);
					}
					}
					State = 1138;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1139;
				typeDcl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdsContext ids() {
			return GetRuleContext<IdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ValDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterValDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitValDcl(this);
		}
	}

	[RuleVersion(0)]
	public ValDclContext valDcl() {
		ValDclContext _localctx = new ValDclContext(Context, State);
		EnterRule(_localctx, 148, RULE_valDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			ids();
			State = 1143;
			Match(T__18);
			State = 1144;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdsContext ids() {
			return GetRuleContext<IdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public VarDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterVarDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitVarDcl(this);
		}
	}

	[RuleVersion(0)]
	public VarDclContext varDcl() {
		VarDclContext _localctx = new VarDclContext(Context, State);
		EnterRule(_localctx, 150, RULE_varDcl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1146;
			ids();
			State = 1147;
			Match(T__18);
			State = 1148;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunSigContext funSig() {
			return GetRuleContext<FunSigContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public FunDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterFunDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitFunDcl(this);
		}
	}

	[RuleVersion(0)]
	public FunDclContext funDcl() {
		FunDclContext _localctx = new FunDclContext(Context, State);
		EnterRule(_localctx, 152, RULE_funDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1150;
			funSig();
			State = 1153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 1151;
				Match(T__18);
				State = 1152;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunSigContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamClausesContext paramClauses() {
			return GetRuleContext<ParamClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunTypeParamClauseContext funTypeParamClause() {
			return GetRuleContext<FunTypeParamClauseContext>(0);
		}
		public FunSigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funSig; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterFunSig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitFunSig(this);
		}
	}

	[RuleVersion(0)]
	public FunSigContext funSig() {
		FunSigContext _localctx = new FunSigContext(Context, State);
		EnterRule(_localctx, 154, RULE_funSig);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			Match(Id);
			State = 1157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1156;
				funTypeParamClause();
				}
			}

			State = 1159;
			paramClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamClauseContext typeParamClause() {
			return GetRuleContext<TypeParamClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		public TypeDclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDcl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypeDcl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypeDcl(this);
		}
	}

	[RuleVersion(0)]
	public TypeDclContext typeDcl() {
		TypeDclContext _localctx = new TypeDclContext(Context, State);
		EnterRule(_localctx, 156, RULE_typeDcl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161;
			Match(Id);
			State = 1163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1162;
				typeParamClause();
				}
			}

			State = 1167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__44) {
				{
				State = 1165;
				Match(T__44);
				State = 1166;
				type_();
				}
			}

			State = 1171;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__45) {
				{
				State = 1169;
				Match(T__45);
				State = 1170;
				type_();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatVarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatDefContext patDef() {
			return GetRuleContext<PatDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefContext varDef() {
			return GetRuleContext<VarDefContext>(0);
		}
		public PatVarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patVarDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPatVarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPatVarDef(this);
		}
	}

	[RuleVersion(0)]
	public PatVarDefContext patVarDef() {
		PatVarDefContext _localctx = new PatVarDefContext(Context, State);
		EnterRule(_localctx, 158, RULE_patVarDef);
		try {
			State = 1177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1173;
				Match(T__15);
				State = 1174;
				patDef();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1175;
				Match(T__47);
				State = 1176;
				varDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Def_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatVarDefContext patVarDef() {
			return GetRuleContext<PatVarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunDefContext funDef() {
			return GetRuleContext<FunDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeDefContext typeDef() {
			return GetRuleContext<TypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TmplDefContext tmplDef() {
			return GetRuleContext<TmplDefContext>(0);
		}
		public Def_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_def_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterDef_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitDef_(this);
		}
	}

	[RuleVersion(0)]
	public Def_Context def_() {
		Def_Context _localctx = new Def_Context(Context, State);
		EnterRule(_localctx, 160, RULE_def_);
		int _la;
		try {
			State = 1191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
			case T__47:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1179;
				patVarDef();
				}
				break;
			case T__55:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1180;
				Match(T__55);
				State = 1181;
				funDef();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1182;
				Match(T__14);
				State = 1186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NL) {
					{
					{
					State = 1183;
					Match(NL);
					}
					}
					State = 1188;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1189;
				typeDef();
				}
				break;
			case T__41:
			case T__56:
			case T__57:
			case T__58:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1190;
				tmplDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Pattern2Context[] pattern2() {
			return GetRuleContexts<Pattern2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Pattern2Context pattern2(int i) {
			return GetRuleContext<Pattern2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public PatDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_patDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPatDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPatDef(this);
		}
	}

	[RuleVersion(0)]
	public PatDefContext patDef() {
		PatDefContext _localctx = new PatDefContext(Context, State);
		EnterRule(_localctx, 162, RULE_patDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1193;
			pattern2();
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 1194;
				Match(T__3);
				State = 1195;
				pattern2();
				}
				}
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__18) {
				{
				State = 1201;
				Match(T__18);
				State = 1202;
				type_();
				}
			}

			State = 1205;
			Match(T__33);
			State = 1206;
			expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatDefContext patDef() {
			return GetRuleContext<PatDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdsContext ids() {
			return GetRuleContext<IdsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public VarDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterVarDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitVarDef(this);
		}
	}

	[RuleVersion(0)]
	public VarDefContext varDef() {
		VarDefContext _localctx = new VarDefContext(Context, State);
		EnterRule(_localctx, 164, RULE_varDef);
		try {
			State = 1215;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208;
				patDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1209;
				ids();
				State = 1210;
				Match(T__18);
				State = 1211;
				type_();
				State = 1212;
				Match(T__33);
				State = 1213;
				Match(T__19);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunSigContext funSig() {
			return GetRuleContext<FunSigContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParamClauseContext paramClause() {
			return GetRuleContext<ParamClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamClausesContext paramClauses() {
			return GetRuleContext<ParamClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrExprContext constrExpr() {
			return GetRuleContext<ConstrExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrBlockContext constrBlock() {
			return GetRuleContext<ConstrBlockContext>(0);
		}
		public FunDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterFunDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitFunDef(this);
		}
	}

	[RuleVersion(0)]
	public FunDefContext funDef() {
		FunDefContext _localctx = new FunDefContext(Context, State);
		EnterRule(_localctx, 166, RULE_funDef);
		int _la;
		try {
			State = 1244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1217;
				funSig();
				State = 1220;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 1218;
					Match(T__18);
					State = 1219;
					type_();
					}
				}

				State = 1222;
				Match(T__33);
				State = 1223;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1225;
				funSig();
				State = 1227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 1226;
					Match(NL);
					}
				}

				State = 1229;
				Match(T__12);
				State = 1230;
				block();
				State = 1231;
				Match(T__13);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1233;
				Match(T__4);
				State = 1234;
				paramClause();
				State = 1235;
				paramClauses();
				State = 1242;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__33:
					{
					State = 1236;
					Match(T__33);
					State = 1237;
					constrExpr();
					}
					break;
				case T__12:
				case NL:
					{
					State = 1239;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL) {
						{
						State = 1238;
						Match(NL);
						}
					}

					State = 1241;
					constrBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamClauseContext typeParamClause() {
			return GetRuleContext<TypeParamClauseContext>(0);
		}
		public TypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTypeDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTypeDef(this);
		}
	}

	[RuleVersion(0)]
	public TypeDefContext typeDef() {
		TypeDefContext _localctx = new TypeDefContext(Context, State);
		EnterRule(_localctx, 168, RULE_typeDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246;
			Match(Id);
			State = 1248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1247;
				typeParamClause();
				}
			}

			State = 1250;
			Match(T__33);
			State = 1251;
			type_();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TmplDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassDefContext classDef() {
			return GetRuleContext<ClassDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDefContext objectDef() {
			return GetRuleContext<ObjectDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TraitDefContext traitDef() {
			return GetRuleContext<TraitDefContext>(0);
		}
		public TmplDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tmplDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTmplDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTmplDef(this);
		}
	}

	[RuleVersion(0)]
	public TmplDefContext tmplDef() {
		TmplDefContext _localctx = new TmplDefContext(Context, State);
		EnterRule(_localctx, 170, RULE_tmplDef);
		int _la;
		try {
			State = 1265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__41) {
					{
					State = 1253;
					Match(T__41);
					}
				}

				State = 1256;
				Match(T__56);
				State = 1257;
				classDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__41) {
					{
					State = 1258;
					Match(T__41);
					}
				}

				State = 1261;
				Match(T__57);
				State = 1262;
				objectDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1263;
				Match(T__58);
				State = 1264;
				traitDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassParamClausesContext classParamClauses() {
			return GetRuleContext<ClassParamClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassTemplateOptContext classTemplateOpt() {
			return GetRuleContext<ClassTemplateOptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamClauseContext typeParamClause() {
			return GetRuleContext<TypeParamClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrAnnotationContext[] constrAnnotation() {
			return GetRuleContexts<ConstrAnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrAnnotationContext constrAnnotation(int i) {
			return GetRuleContext<ConstrAnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		public ClassDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassDef(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefContext classDef() {
		ClassDefContext _localctx = new ClassDefContext(Context, State);
		EnterRule(_localctx, 172, RULE_classDef);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1267;
			Match(Id);
			State = 1269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1268;
				typeParamClause();
				}
			}

			State = 1274;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1271;
					constrAnnotation();
					}
					} 
				}
				State = 1276;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,178,Context);
			}
			State = 1278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 1277;
				accessModifier();
				}
				break;
			}
			State = 1280;
			classParamClauses();
			State = 1281;
			classTemplateOpt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TraitTemplateOptContext traitTemplateOpt() {
			return GetRuleContext<TraitTemplateOptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeParamClauseContext typeParamClause() {
			return GetRuleContext<TypeParamClauseContext>(0);
		}
		public TraitDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTraitDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTraitDef(this);
		}
	}

	[RuleVersion(0)]
	public TraitDefContext traitDef() {
		TraitDefContext _localctx = new TraitDefContext(Context, State);
		EnterRule(_localctx, 174, RULE_traitDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1283;
			Match(Id);
			State = 1285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__6) {
				{
				State = 1284;
				typeParamClause();
				}
			}

			State = 1287;
			traitTemplateOpt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Id() { return GetToken(ScalaParser.Id, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassTemplateOptContext classTemplateOpt() {
			return GetRuleContext<ClassTemplateOptContext>(0);
		}
		public ObjectDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterObjectDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitObjectDef(this);
		}
	}

	[RuleVersion(0)]
	public ObjectDefContext objectDef() {
		ObjectDefContext _localctx = new ObjectDefContext(Context, State);
		EnterRule(_localctx, 176, RULE_objectDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1289;
			Match(Id);
			State = 1290;
			classTemplateOpt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTemplateOptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassTemplateContext classTemplate() {
			return GetRuleContext<ClassTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ClassTemplateOptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTemplateOpt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassTemplateOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassTemplateOpt(this);
		}
	}

	[RuleVersion(0)]
	public ClassTemplateOptContext classTemplateOpt() {
		ClassTemplateOptContext _localctx = new ClassTemplateOptContext(Context, State);
		EnterRule(_localctx, 178, RULE_classTemplateOpt);
		int _la;
		try {
			State = 1300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1292;
				Match(T__59);
				State = 1293;
				classTemplate();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1298;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
				case 1:
					{
					State = 1295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__59) {
						{
						State = 1294;
						Match(T__59);
						}
					}

					State = 1297;
					templateBody();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitTemplateOptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TraitTemplateContext traitTemplate() {
			return GetRuleContext<TraitTemplateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public TraitTemplateOptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitTemplateOpt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTraitTemplateOpt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTraitTemplateOpt(this);
		}
	}

	[RuleVersion(0)]
	public TraitTemplateOptContext traitTemplateOpt() {
		TraitTemplateOptContext _localctx = new TraitTemplateOptContext(Context, State);
		EnterRule(_localctx, 180, RULE_traitTemplateOpt);
		int _la;
		try {
			State = 1310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1302;
				Match(T__59);
				State = 1303;
				traitTemplate();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
				case 1:
					{
					State = 1305;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__59) {
						{
						State = 1304;
						Match(T__59);
						}
					}

					State = 1307;
					templateBody();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ClassParentsContext classParents() {
			return GetRuleContext<ClassParentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EarlyDefsContext earlyDefs() {
			return GetRuleContext<EarlyDefsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public ClassTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassTemplate(this);
		}
	}

	[RuleVersion(0)]
	public ClassTemplateContext classTemplate() {
		ClassTemplateContext _localctx = new ClassTemplateContext(Context, State);
		EnterRule(_localctx, 182, RULE_classTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1312;
				earlyDefs();
				}
			}

			State = 1315;
			classParents();
			State = 1317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 1316;
				templateBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitTemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TraitParentsContext traitParents() {
			return GetRuleContext<TraitParentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EarlyDefsContext earlyDefs() {
			return GetRuleContext<EarlyDefsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBodyContext templateBody() {
			return GetRuleContext<TemplateBodyContext>(0);
		}
		public TraitTemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitTemplate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTraitTemplate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTraitTemplate(this);
		}
	}

	[RuleVersion(0)]
	public TraitTemplateContext traitTemplate() {
		TraitTemplateContext _localctx = new TraitTemplateContext(Context, State);
		EnterRule(_localctx, 184, RULE_traitTemplate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1320;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12) {
				{
				State = 1319;
				earlyDefs();
				}
			}

			State = 1322;
			traitParents();
			State = 1324;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				{
				State = 1323;
				templateBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassParentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstrContext constr() {
			return GetRuleContext<ConstrContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext[] annotType() {
			return GetRuleContexts<AnnotTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext annotType(int i) {
			return GetRuleContext<AnnotTypeContext>(i);
		}
		public ClassParentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classParents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterClassParents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitClassParents(this);
		}
	}

	[RuleVersion(0)]
	public ClassParentsContext classParents() {
		ClassParentsContext _localctx = new ClassParentsContext(Context, State);
		EnterRule(_localctx, 186, RULE_classParents);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326;
			constr();
			State = 1331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1327;
					Match(T__16);
					State = 1328;
					annotType();
					}
					} 
				}
				State = 1333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,191,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TraitParentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext[] annotType() {
			return GetRuleContexts<AnnotTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext annotType(int i) {
			return GetRuleContext<AnnotTypeContext>(i);
		}
		public TraitParentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_traitParents; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTraitParents(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTraitParents(this);
		}
	}

	[RuleVersion(0)]
	public TraitParentsContext traitParents() {
		TraitParentsContext _localctx = new TraitParentsContext(Context, State);
		EnterRule(_localctx, 188, RULE_traitParents);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1334;
			annotType();
			State = 1339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 1335;
				Match(T__16);
				State = 1336;
				annotType();
				}
				}
				State = 1341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AnnotTypeContext annotType() {
			return GetRuleContext<AnnotTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext[] argumentExprs() {
			return GetRuleContexts<ArgumentExprsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext argumentExprs(int i) {
			return GetRuleContext<ArgumentExprsContext>(i);
		}
		public ConstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterConstr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitConstr(this);
		}
	}

	[RuleVersion(0)]
	public ConstrContext constr() {
		ConstrContext _localctx = new ConstrContext(Context, State);
		EnterRule(_localctx, 190, RULE_constr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1342;
			annotType();
			State = 1346;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1343;
					argumentExprs();
					}
					} 
				}
				State = 1348;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EarlyDefsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EarlyDefContext[] earlyDef() {
			return GetRuleContexts<EarlyDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public EarlyDefContext earlyDef(int i) {
			return GetRuleContext<EarlyDefContext>(i);
		}
		public EarlyDefsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_earlyDefs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterEarlyDefs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitEarlyDefs(this);
		}
	}

	[RuleVersion(0)]
	public EarlyDefsContext earlyDefs() {
		EarlyDefsContext _localctx = new EarlyDefsContext(Context, State);
		EnterRule(_localctx, 192, RULE_earlyDefs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1349;
			Match(T__12);
			State = 1351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1350;
				earlyDef();
				}
				}
				State = 1353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 35766013744185344L) != 0) );
			State = 1355;
			Match(T__13);
			State = 1356;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EarlyDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PatVarDefContext patVarDef() {
			return GetRuleContext<PatVarDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		public EarlyDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_earlyDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterEarlyDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitEarlyDef(this);
		}
	}

	[RuleVersion(0)]
	public EarlyDefContext earlyDef() {
		EarlyDefContext _localctx = new EarlyDefContext(Context, State);
		EnterRule(_localctx, 194, RULE_earlyDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__43) {
				{
				{
				State = 1358;
				annotation();
				State = 1360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NL) {
					{
					State = 1359;
					Match(NL);
					}
				}

				}
				}
				State = 1366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35466946581364736L) != 0)) {
				{
				{
				State = 1367;
				modifier();
				}
				}
				State = 1372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1373;
			patVarDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelfInvocationContext selfInvocation() {
			return GetRuleContext<SelfInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstrBlockContext constrBlock() {
			return GetRuleContext<ConstrBlockContext>(0);
		}
		public ConstrExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterConstrExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitConstrExpr(this);
		}
	}

	[RuleVersion(0)]
	public ConstrExprContext constrExpr() {
		ConstrExprContext _localctx = new ConstrExprContext(Context, State);
		EnterRule(_localctx, 196, RULE_constrExpr);
		try {
			State = 1377;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1375;
				selfInvocation();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1376;
				constrBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstrBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelfInvocationContext selfInvocation() {
			return GetRuleContext<SelfInvocationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatContext[] blockStat() {
			return GetRuleContexts<BlockStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatContext blockStat(int i) {
			return GetRuleContext<BlockStatContext>(i);
		}
		public ConstrBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constrBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterConstrBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitConstrBlock(this);
		}
	}

	[RuleVersion(0)]
	public ConstrBlockContext constrBlock() {
		ConstrBlockContext _localctx = new ConstrBlockContext(Context, State);
		EnterRule(_localctx, 198, RULE_constrBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1379;
			Match(T__12);
			State = 1380;
			selfInvocation();
			State = 1384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & -3486606401368644506L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & 31L) != 0)) {
				{
				{
				State = 1381;
				blockStat();
				}
				}
				State = 1386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1387;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfInvocationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext[] argumentExprs() {
			return GetRuleContexts<ArgumentExprsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentExprsContext argumentExprs(int i) {
			return GetRuleContext<ArgumentExprsContext>(i);
		}
		public SelfInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfInvocation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterSelfInvocation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitSelfInvocation(this);
		}
	}

	[RuleVersion(0)]
	public SelfInvocationContext selfInvocation() {
		SelfInvocationContext _localctx = new SelfInvocationContext(Context, State);
		EnterRule(_localctx, 200, RULE_selfInvocation);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389;
			Match(T__4);
			State = 1391;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1390;
					argumentExprs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1393;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,200,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatSeqContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TopStatContext[] topStat() {
			return GetRuleContexts<TopStatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatContext topStat(int i) {
			return GetRuleContext<TopStatContext>(i);
		}
		public TopStatSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStatSeq; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTopStatSeq(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTopStatSeq(this);
		}
	}

	[RuleVersion(0)]
	public TopStatSeqContext topStatSeq() {
		TopStatSeqContext _localctx = new TopStatSeqContext(Context, State);
		EnterRule(_localctx, 202, RULE_topStatSeq);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1395;
				topStat();
				}
				}
				State = 1398;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 3386167059577569280L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopStatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TmplDefContext tmplDef() {
			return GetRuleContext<TmplDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NL() { return GetTokens(ScalaParser.NL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL(int i) {
			return GetToken(ScalaParser.NL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_Context import_() {
			return GetRuleContext<Import_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackagingContext packaging() {
			return GetRuleContext<PackagingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PackageObjectContext packageObject() {
			return GetRuleContext<PackageObjectContext>(0);
		}
		public TopStatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topStat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterTopStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitTopStat(this);
		}
	}

	[RuleVersion(0)]
	public TopStatContext topStat() {
		TopStatContext _localctx = new TopStatContext(Context, State);
		EnterRule(_localctx, 204, RULE_topStat);
		int _la;
		try {
			State = 1419;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__43) {
					{
					{
					State = 1400;
					annotation();
					State = 1402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NL) {
						{
						State = 1401;
						Match(NL);
						}
					}

					}
					}
					State = 1408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35466946581364736L) != 0)) {
					{
					{
					State = 1409;
					modifier();
					}
					}
					State = 1414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1415;
				tmplDef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1416;
				import_();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1417;
				packaging();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1418;
				packageObject();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackagingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualIdContext qualId() {
			return GetRuleContext<QualIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopStatSeqContext topStatSeq() {
			return GetRuleContext<TopStatSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NL() { return GetToken(ScalaParser.NL, 0); }
		public PackagingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packaging; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPackaging(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPackaging(this);
		}
	}

	[RuleVersion(0)]
	public PackagingContext packaging() {
		PackagingContext _localctx = new PackagingContext(Context, State);
		EnterRule(_localctx, 206, RULE_packaging);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1421;
			Match(T__60);
			State = 1422;
			qualId();
			State = 1424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NL) {
				{
				State = 1423;
				Match(NL);
				}
			}

			State = 1426;
			Match(T__12);
			State = 1427;
			topStatSeq();
			State = 1428;
			Match(T__13);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ObjectDefContext objectDef() {
			return GetRuleContext<ObjectDefContext>(0);
		}
		public PackageObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterPackageObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitPackageObject(this);
		}
	}

	[RuleVersion(0)]
	public PackageObjectContext packageObject() {
		PackageObjectContext _localctx = new PackageObjectContext(Context, State);
		EnterRule(_localctx, 208, RULE_packageObject);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1430;
			Match(T__60);
			State = 1431;
			Match(T__57);
			State = 1432;
			objectDef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TopStatSeqContext topStatSeq() {
			return GetRuleContext<TopStatSeqContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualIdContext[] qualId() {
			return GetRuleContexts<QualIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualIdContext qualId(int i) {
			return GetRuleContext<QualIdContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IScalaListener typedListener = listener as IScalaListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 210, RULE_compilationUnit);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1438;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1434;
					Match(T__60);
					State = 1435;
					qualId();
					}
					} 
				}
				State = 1440;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			}
			State = 1441;
			topStatSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return stableId_sempred((StableIdContext)_localctx, predIndex);
		case 12: return simpleType_sempred((SimpleTypeContext)_localctx, predIndex);
		case 23: return infixExpr_sempred((InfixExprContext)_localctx, predIndex);
		case 26: return simpleExpr1_sempred((SimpleExpr1Context)_localctx, predIndex);
		}
		return true;
	}
	private bool stableId_sempred(StableIdContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool simpleType_sempred(SimpleTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		}
		return true;
	}
	private bool infixExpr_sempred(InfixExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 1);
		}
		return true;
	}
	private bool simpleExpr1_sempred(SimpleExpr1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return Precpred(Context, 4);
		case 5: return Precpred(Context, 2);
		case 6: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,78,1444,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,1,0,3,0,214,8,0,1,0,1,0,3,0,218,8,0,1,0,1,0,1,0,1,0,1,0,1,
		0,3,0,226,8,0,1,1,1,1,1,1,5,1,231,8,1,10,1,12,1,234,9,1,1,2,1,2,1,2,5,
		2,239,8,2,10,2,12,2,242,9,2,1,3,1,3,1,3,1,3,3,3,248,8,3,1,3,1,3,1,3,3,
		3,253,8,3,1,3,1,3,3,3,257,8,3,3,3,259,8,3,1,3,1,3,1,3,5,3,264,8,3,10,3,
		12,3,267,9,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,279,8,5,3,5,281,
		8,5,1,6,1,6,1,6,1,6,1,6,5,6,288,8,6,10,6,12,6,291,9,6,3,6,293,8,6,1,6,
		3,6,296,8,6,1,7,1,7,1,7,4,7,301,8,7,11,7,12,7,302,1,7,1,7,1,8,1,8,1,8,
		1,8,3,8,311,8,8,1,9,1,9,1,9,5,9,316,8,9,10,9,12,9,319,9,9,1,10,1,10,1,
		10,5,10,324,8,10,10,10,12,10,327,9,10,1,10,3,10,330,8,10,1,10,3,10,333,
		8,10,1,11,1,11,5,11,337,8,11,10,11,12,11,340,9,11,1,12,1,12,1,12,1,12,
		3,12,346,8,12,1,12,1,12,1,12,1,12,3,12,352,8,12,1,12,1,12,1,12,1,12,1,
		12,5,12,359,8,12,10,12,12,12,362,9,12,1,13,1,13,1,13,1,13,1,14,1,14,1,
		14,5,14,371,8,14,10,14,12,14,374,9,14,1,15,3,15,377,8,15,1,15,1,15,4,15,
		381,8,15,11,15,12,15,382,1,15,1,15,1,16,1,16,1,16,3,16,390,8,16,1,17,1,
		17,1,18,1,18,1,18,1,18,4,18,398,8,18,11,18,12,18,399,1,18,1,18,1,18,3,
		18,405,8,18,1,19,1,19,3,19,409,8,19,1,19,1,19,3,19,413,8,19,1,19,1,19,
		1,19,3,19,418,8,19,1,20,1,20,1,20,1,20,1,20,5,20,425,8,20,10,20,12,20,
		428,9,20,1,20,1,20,1,20,3,20,433,8,20,1,20,1,20,1,20,1,20,1,20,5,20,440,
		8,20,10,20,12,20,443,9,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,451,8,20,
		1,20,1,20,3,20,455,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,473,8,20,1,20,3,20,476,8,20,1,20,
		1,20,1,20,1,20,1,20,1,20,3,20,484,8,20,1,20,1,20,1,20,3,20,489,8,20,3,
		20,491,8,20,1,20,1,20,3,20,495,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,507,8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,515,8,
		20,1,21,1,21,1,22,1,22,3,22,521,8,22,1,22,1,22,1,22,5,22,526,8,22,10,22,
		12,22,529,9,22,1,22,3,22,532,8,22,1,23,1,23,1,23,1,23,1,23,1,23,3,23,540,
		8,23,1,23,5,23,543,8,23,10,23,12,23,546,9,23,1,24,3,24,549,8,24,1,24,1,
		24,1,24,3,24,554,8,24,3,24,556,8,24,1,25,1,25,1,25,3,25,561,8,25,1,25,
		3,25,564,8,25,1,26,1,26,1,26,1,26,1,26,1,26,3,26,572,8,26,1,26,1,26,1,
		26,1,26,1,26,1,26,1,26,1,26,3,26,582,8,26,1,26,1,26,3,26,586,8,26,1,26,
		1,26,1,26,1,26,3,26,592,8,26,1,26,1,26,1,26,5,26,597,8,26,10,26,12,26,
		600,9,26,1,27,1,27,1,27,5,27,605,8,27,10,27,12,27,608,9,27,1,28,1,28,1,
		28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,619,8,28,1,28,3,28,622,8,28,1,29,
		3,29,625,8,29,1,29,1,29,1,29,3,29,630,8,29,1,29,1,29,3,29,634,8,29,3,29,
		636,8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,646,8,30,1,31,4,
		31,649,8,31,11,31,12,31,650,1,31,3,31,654,8,31,1,32,1,32,5,32,658,8,32,
		10,32,12,32,661,9,32,1,32,3,32,664,8,32,1,32,1,32,5,32,668,8,32,10,32,
		12,32,671,9,32,1,32,5,32,674,8,32,10,32,12,32,677,9,32,1,32,1,32,3,32,
		681,8,32,1,33,1,33,1,33,3,33,686,8,33,1,33,1,33,3,33,690,8,33,1,33,1,33,
		3,33,694,8,33,1,33,1,33,1,33,3,33,699,8,33,1,34,4,34,702,8,34,11,34,12,
		34,703,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,5,35,714,8,35,10,35,12,
		35,717,9,35,1,36,4,36,720,8,36,11,36,12,36,721,1,37,1,37,1,37,3,37,727,
		8,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,5,39,738,8,39,10,39,
		12,39,741,9,39,1,40,1,40,1,40,1,40,3,40,747,8,40,1,41,1,41,1,41,3,41,752,
		8,41,1,41,3,41,755,8,41,1,42,1,42,1,42,1,42,3,42,761,8,42,1,42,5,42,764,
		8,42,10,42,12,42,767,9,42,3,42,769,8,42,1,43,1,43,1,43,1,43,1,43,1,43,
		3,43,777,8,43,1,43,3,43,780,8,43,1,43,1,43,1,43,1,43,1,43,3,43,787,8,43,
		1,43,1,43,3,43,791,8,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,799,8,43,1,
		43,3,43,802,8,43,1,44,1,44,1,44,3,44,807,8,44,1,44,1,44,3,44,811,8,44,
		1,45,1,45,1,45,1,45,5,45,817,8,45,10,45,12,45,820,9,45,1,45,1,45,1,46,
		1,46,1,46,1,46,5,46,828,8,46,10,46,12,46,831,9,46,1,46,1,46,1,47,5,47,
		836,8,47,10,47,12,47,839,9,47,1,47,3,47,842,8,47,1,47,1,47,1,48,1,48,3,
		48,848,8,48,1,48,1,48,3,48,852,8,48,1,48,1,48,3,48,856,8,48,1,48,1,48,
		5,48,860,8,48,10,48,12,48,863,9,48,1,48,1,48,5,48,867,8,48,10,48,12,48,
		870,9,48,1,49,5,49,873,8,49,10,49,12,49,876,9,49,1,49,3,49,879,8,49,1,
		49,1,49,1,49,1,49,1,49,3,49,886,8,49,1,50,3,50,889,8,50,1,50,1,50,3,50,
		893,8,50,1,50,1,50,1,51,1,51,1,51,5,51,900,8,51,10,51,12,51,903,9,51,1,
		52,5,52,906,8,52,10,52,12,52,909,9,52,1,52,1,52,1,52,3,52,914,8,52,1,52,
		1,52,3,52,918,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,926,8,53,1,54,5,
		54,929,8,54,10,54,12,54,932,9,54,1,54,3,54,935,8,54,1,54,1,54,1,54,1,54,
		1,54,3,54,942,8,54,1,55,3,55,945,8,55,1,55,1,55,3,55,949,8,55,1,55,1,55,
		1,56,1,56,1,56,5,56,956,8,56,10,56,12,56,959,9,56,1,57,5,57,962,8,57,10,
		57,12,57,965,9,57,1,57,5,57,968,8,57,10,57,12,57,971,9,57,1,57,3,57,974,
		8,57,1,57,1,57,1,57,1,57,1,57,3,57,981,8,57,1,58,1,58,1,58,1,58,5,58,987,
		8,58,10,58,12,58,990,9,58,1,58,1,58,1,59,1,59,1,59,3,59,997,8,59,1,60,
		1,60,1,60,3,60,1002,8,60,1,61,1,61,1,62,1,62,3,62,1008,8,62,1,63,1,63,
		1,63,1,63,1,64,1,64,1,64,5,64,1017,8,64,10,64,12,64,1020,9,64,1,65,1,65,
		1,65,1,65,1,66,3,66,1027,8,66,1,66,1,66,3,66,1031,8,66,1,66,4,66,1034,
		8,66,11,66,12,66,1035,1,66,1,66,1,67,1,67,1,67,3,67,1043,8,67,5,67,1045,
		8,67,10,67,12,67,1048,9,67,1,67,5,67,1051,8,67,10,67,12,67,1054,9,67,1,
		67,1,67,1,67,3,67,1059,8,67,5,67,1061,8,67,10,67,12,67,1064,9,67,1,67,
		5,67,1067,8,67,10,67,12,67,1070,9,67,1,67,1,67,3,67,1074,8,67,1,68,1,68,
		1,68,3,68,1079,8,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1087,8,68,1,69,
		1,69,1,69,1,69,5,69,1093,8,69,10,69,12,69,1096,9,69,1,70,1,70,1,70,1,70,
		1,70,3,70,1103,8,70,3,70,1105,8,70,1,71,1,71,1,71,1,71,5,71,1111,8,71,
		10,71,12,71,1114,9,71,1,71,1,71,3,71,1118,8,71,1,71,1,71,1,72,1,72,1,72,
		3,72,1125,8,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,1135,8,73,
		10,73,12,73,1138,9,73,1,73,3,73,1141,8,73,1,74,1,74,1,74,1,74,1,75,1,75,
		1,75,1,75,1,76,1,76,1,76,3,76,1154,8,76,1,77,1,77,3,77,1158,8,77,1,77,
		1,77,1,78,1,78,3,78,1164,8,78,1,78,1,78,3,78,1168,8,78,1,78,1,78,3,78,
		1172,8,78,1,79,1,79,1,79,1,79,3,79,1178,8,79,1,80,1,80,1,80,1,80,1,80,
		5,80,1185,8,80,10,80,12,80,1188,9,80,1,80,1,80,3,80,1192,8,80,1,81,1,81,
		1,81,5,81,1197,8,81,10,81,12,81,1200,9,81,1,81,1,81,3,81,1204,8,81,1,81,
		1,81,1,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1216,8,82,1,83,1,83,
		1,83,3,83,1221,8,83,1,83,1,83,1,83,1,83,1,83,3,83,1228,8,83,1,83,1,83,
		1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1240,8,83,1,83,3,83,1243,
		8,83,3,83,1245,8,83,1,84,1,84,3,84,1249,8,84,1,84,1,84,1,84,1,85,3,85,
		1255,8,85,1,85,1,85,1,85,3,85,1260,8,85,1,85,1,85,1,85,1,85,3,85,1266,
		8,85,1,86,1,86,3,86,1270,8,86,1,86,5,86,1273,8,86,10,86,12,86,1276,9,86,
		1,86,3,86,1279,8,86,1,86,1,86,1,86,1,87,1,87,3,87,1286,8,87,1,87,1,87,
		1,88,1,88,1,88,1,89,1,89,1,89,3,89,1296,8,89,1,89,3,89,1299,8,89,3,89,
		1301,8,89,1,90,1,90,1,90,3,90,1306,8,90,1,90,3,90,1309,8,90,3,90,1311,
		8,90,1,91,3,91,1314,8,91,1,91,1,91,3,91,1318,8,91,1,92,3,92,1321,8,92,
		1,92,1,92,3,92,1325,8,92,1,93,1,93,1,93,5,93,1330,8,93,10,93,12,93,1333,
		9,93,1,94,1,94,1,94,5,94,1338,8,94,10,94,12,94,1341,9,94,1,95,1,95,5,95,
		1345,8,95,10,95,12,95,1348,9,95,1,96,1,96,4,96,1352,8,96,11,96,12,96,1353,
		1,96,1,96,1,96,1,97,1,97,3,97,1361,8,97,5,97,1363,8,97,10,97,12,97,1366,
		9,97,1,97,5,97,1369,8,97,10,97,12,97,1372,9,97,1,97,1,97,1,98,1,98,3,98,
		1378,8,98,1,99,1,99,1,99,5,99,1383,8,99,10,99,12,99,1386,9,99,1,99,1,99,
		1,100,1,100,4,100,1392,8,100,11,100,12,100,1393,1,101,4,101,1397,8,101,
		11,101,12,101,1398,1,102,1,102,3,102,1403,8,102,5,102,1405,8,102,10,102,
		12,102,1408,9,102,1,102,5,102,1411,8,102,10,102,12,102,1414,9,102,1,102,
		1,102,1,102,1,102,3,102,1420,8,102,1,103,1,103,1,103,3,103,1425,8,103,
		1,103,1,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,5,105,1437,
		8,105,10,105,12,105,1440,9,105,1,105,1,105,1,105,0,4,6,24,46,52,106,0,
		2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
		52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
		100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
		136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
		172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
		208,210,0,10,2,0,1,1,36,38,1,0,19,21,2,0,22,22,40,40,3,0,20,20,62,62,70,
		70,2,0,1,1,36,36,2,0,20,20,62,62,2,0,16,16,48,48,3,0,22,22,40,40,50,52,
		1,0,53,54,2,0,5,5,62,62,1586,0,225,1,0,0,0,2,227,1,0,0,0,4,235,1,0,0,0,
		6,258,1,0,0,0,8,268,1,0,0,0,10,280,1,0,0,0,12,295,1,0,0,0,14,297,1,0,0,
		0,16,310,1,0,0,0,18,312,1,0,0,0,20,332,1,0,0,0,22,334,1,0,0,0,24,351,1,
		0,0,0,26,363,1,0,0,0,28,367,1,0,0,0,30,376,1,0,0,0,32,389,1,0,0,0,34,391,
		1,0,0,0,36,404,1,0,0,0,38,417,1,0,0,0,40,514,1,0,0,0,42,516,1,0,0,0,44,
		518,1,0,0,0,46,533,1,0,0,0,48,548,1,0,0,0,50,563,1,0,0,0,52,581,1,0,0,
		0,54,601,1,0,0,0,56,621,1,0,0,0,58,635,1,0,0,0,60,645,1,0,0,0,62,648,1,
		0,0,0,64,680,1,0,0,0,66,698,1,0,0,0,68,701,1,0,0,0,70,705,1,0,0,0,72,719,
		1,0,0,0,74,723,1,0,0,0,76,731,1,0,0,0,78,734,1,0,0,0,80,746,1,0,0,0,82,
		754,1,0,0,0,84,768,1,0,0,0,86,801,1,0,0,0,88,810,1,0,0,0,90,812,1,0,0,
		0,92,823,1,0,0,0,94,837,1,0,0,0,96,845,1,0,0,0,98,874,1,0,0,0,100,888,
		1,0,0,0,102,896,1,0,0,0,104,907,1,0,0,0,106,925,1,0,0,0,108,930,1,0,0,
		0,110,944,1,0,0,0,112,952,1,0,0,0,114,963,1,0,0,0,116,982,1,0,0,0,118,
		993,1,0,0,0,120,1001,1,0,0,0,122,1003,1,0,0,0,124,1005,1,0,0,0,126,1009,
		1,0,0,0,128,1013,1,0,0,0,130,1021,1,0,0,0,132,1026,1,0,0,0,134,1073,1,
		0,0,0,136,1086,1,0,0,0,138,1088,1,0,0,0,140,1097,1,0,0,0,142,1106,1,0,
		0,0,144,1121,1,0,0,0,146,1140,1,0,0,0,148,1142,1,0,0,0,150,1146,1,0,0,
		0,152,1150,1,0,0,0,154,1155,1,0,0,0,156,1161,1,0,0,0,158,1177,1,0,0,0,
		160,1191,1,0,0,0,162,1193,1,0,0,0,164,1215,1,0,0,0,166,1244,1,0,0,0,168,
		1246,1,0,0,0,170,1265,1,0,0,0,172,1267,1,0,0,0,174,1283,1,0,0,0,176,1289,
		1,0,0,0,178,1300,1,0,0,0,180,1310,1,0,0,0,182,1313,1,0,0,0,184,1320,1,
		0,0,0,186,1326,1,0,0,0,188,1334,1,0,0,0,190,1342,1,0,0,0,192,1349,1,0,
		0,0,194,1364,1,0,0,0,196,1377,1,0,0,0,198,1379,1,0,0,0,200,1389,1,0,0,
		0,202,1396,1,0,0,0,204,1419,1,0,0,0,206,1421,1,0,0,0,208,1430,1,0,0,0,
		210,1438,1,0,0,0,212,214,5,1,0,0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,
		1,0,0,0,215,226,5,66,0,0,216,218,5,1,0,0,217,216,1,0,0,0,217,218,1,0,0,
		0,218,219,1,0,0,0,219,226,5,68,0,0,220,226,5,63,0,0,221,226,5,64,0,0,222,
		226,5,67,0,0,223,226,5,65,0,0,224,226,5,2,0,0,225,213,1,0,0,0,225,217,
		1,0,0,0,225,220,1,0,0,0,225,221,1,0,0,0,225,222,1,0,0,0,225,223,1,0,0,
		0,225,224,1,0,0,0,226,1,1,0,0,0,227,232,5,62,0,0,228,229,5,3,0,0,229,231,
		5,62,0,0,230,228,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,
		0,233,3,1,0,0,0,234,232,1,0,0,0,235,240,5,62,0,0,236,237,5,4,0,0,237,239,
		5,62,0,0,238,236,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,
		0,241,5,1,0,0,0,242,240,1,0,0,0,243,244,6,3,-1,0,244,259,5,62,0,0,245,
		246,5,62,0,0,246,248,5,3,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,256,1,
		0,0,0,249,257,5,5,0,0,250,252,5,6,0,0,251,253,3,8,4,0,252,251,1,0,0,0,
		252,253,1,0,0,0,253,254,1,0,0,0,254,255,5,3,0,0,255,257,5,62,0,0,256,249,
		1,0,0,0,256,250,1,0,0,0,257,259,1,0,0,0,258,243,1,0,0,0,258,247,1,0,0,
		0,259,265,1,0,0,0,260,261,10,2,0,0,261,262,5,3,0,0,262,264,5,62,0,0,263,
		260,1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,7,1,0,
		0,0,267,265,1,0,0,0,268,269,5,7,0,0,269,270,5,62,0,0,270,271,5,8,0,0,271,
		9,1,0,0,0,272,273,3,12,6,0,273,274,5,9,0,0,274,275,3,10,5,0,275,281,1,
		0,0,0,276,278,3,18,9,0,277,279,3,14,7,0,278,277,1,0,0,0,278,279,1,0,0,
		0,279,281,1,0,0,0,280,272,1,0,0,0,280,276,1,0,0,0,281,11,1,0,0,0,282,296,
		3,18,9,0,283,292,5,10,0,0,284,289,3,106,53,0,285,286,5,4,0,0,286,288,3,
		106,53,0,287,285,1,0,0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,
		0,290,293,1,0,0,0,291,289,1,0,0,0,292,284,1,0,0,0,292,293,1,0,0,0,293,
		294,1,0,0,0,294,296,5,11,0,0,295,282,1,0,0,0,295,283,1,0,0,0,296,13,1,
		0,0,0,297,298,5,12,0,0,298,300,5,13,0,0,299,301,3,16,8,0,300,299,1,0,0,
		0,301,302,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,
		305,5,14,0,0,305,15,1,0,0,0,306,307,5,15,0,0,307,311,3,156,78,0,308,309,
		5,16,0,0,309,311,3,148,74,0,310,306,1,0,0,0,310,308,1,0,0,0,311,17,1,0,
		0,0,312,317,3,20,10,0,313,314,5,62,0,0,314,316,3,20,10,0,315,313,1,0,0,
		0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,19,1,0,0,0,319,317,
		1,0,0,0,320,325,3,22,11,0,321,322,5,17,0,0,322,324,3,22,11,0,323,321,1,
		0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,329,1,0,0,0,
		327,325,1,0,0,0,328,330,3,30,15,0,329,328,1,0,0,0,329,330,1,0,0,0,330,
		333,1,0,0,0,331,333,3,30,15,0,332,320,1,0,0,0,332,331,1,0,0,0,333,21,1,
		0,0,0,334,338,3,24,12,0,335,337,3,128,64,0,336,335,1,0,0,0,337,340,1,0,
		0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,23,1,0,0,0,340,338,1,0,0,0,341,
		342,6,12,-1,0,342,345,3,6,3,0,343,344,5,3,0,0,344,346,5,15,0,0,345,343,
		1,0,0,0,345,346,1,0,0,0,346,352,1,0,0,0,347,348,5,10,0,0,348,349,3,28,
		14,0,349,350,5,11,0,0,350,352,1,0,0,0,351,341,1,0,0,0,351,347,1,0,0,0,
		352,360,1,0,0,0,353,354,10,4,0,0,354,359,3,26,13,0,355,356,10,3,0,0,356,
		357,5,18,0,0,357,359,5,62,0,0,358,353,1,0,0,0,358,355,1,0,0,0,359,362,
		1,0,0,0,360,358,1,0,0,0,360,361,1,0,0,0,361,25,1,0,0,0,362,360,1,0,0,0,
		363,364,5,7,0,0,364,365,3,28,14,0,365,366,5,8,0,0,366,27,1,0,0,0,367,372,
		3,10,5,0,368,369,5,4,0,0,369,371,3,10,5,0,370,368,1,0,0,0,371,374,1,0,
		0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,29,1,0,0,0,374,372,1,0,0,0,375,
		377,5,74,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,380,5,
		13,0,0,379,381,3,32,16,0,380,379,1,0,0,0,381,382,1,0,0,0,382,380,1,0,0,
		0,382,383,1,0,0,0,383,384,1,0,0,0,384,385,5,14,0,0,385,31,1,0,0,0,386,
		390,3,146,73,0,387,388,5,15,0,0,388,390,3,168,84,0,389,386,1,0,0,0,389,
		387,1,0,0,0,390,33,1,0,0,0,391,392,3,10,5,0,392,35,1,0,0,0,393,394,5,19,
		0,0,394,405,3,18,9,0,395,397,5,19,0,0,396,398,3,128,64,0,397,396,1,0,0,
		0,398,399,1,0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,405,1,0,0,0,401,
		402,5,19,0,0,402,403,5,20,0,0,403,405,5,21,0,0,404,393,1,0,0,0,404,395,
		1,0,0,0,404,401,1,0,0,0,405,37,1,0,0,0,406,413,3,116,58,0,407,409,5,22,
		0,0,408,407,1,0,0,0,408,409,1,0,0,0,409,410,1,0,0,0,410,413,5,62,0,0,411,
		413,5,20,0,0,412,406,1,0,0,0,412,408,1,0,0,0,412,411,1,0,0,0,413,414,1,
		0,0,0,414,415,5,9,0,0,415,418,3,38,19,0,416,418,3,40,20,0,417,412,1,0,
		0,0,417,416,1,0,0,0,418,39,1,0,0,0,419,420,5,23,0,0,420,421,5,10,0,0,421,
		422,3,38,19,0,422,426,5,11,0,0,423,425,5,74,0,0,424,423,1,0,0,0,425,428,
		1,0,0,0,426,424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,
		0,429,432,3,38,19,0,430,431,5,24,0,0,431,433,3,38,19,0,432,430,1,0,0,0,
		432,433,1,0,0,0,433,515,1,0,0,0,434,435,5,25,0,0,435,436,5,10,0,0,436,
		437,3,38,19,0,437,441,5,11,0,0,438,440,5,74,0,0,439,438,1,0,0,0,440,443,
		1,0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,
		0,444,445,3,38,19,0,445,515,1,0,0,0,446,447,5,26,0,0,447,450,3,38,19,0,
		448,449,5,27,0,0,449,451,3,38,19,0,450,448,1,0,0,0,450,451,1,0,0,0,451,
		454,1,0,0,0,452,453,5,28,0,0,453,455,3,38,19,0,454,452,1,0,0,0,454,455,
		1,0,0,0,455,515,1,0,0,0,456,457,5,29,0,0,457,458,3,38,19,0,458,459,5,25,
		0,0,459,460,5,10,0,0,460,461,3,38,19,0,461,462,5,11,0,0,462,515,1,0,0,
		0,463,472,5,30,0,0,464,465,5,10,0,0,465,466,3,68,34,0,466,467,5,11,0,0,
		467,473,1,0,0,0,468,469,5,13,0,0,469,470,3,68,34,0,470,471,5,14,0,0,471,
		473,1,0,0,0,472,464,1,0,0,0,472,468,1,0,0,0,473,475,1,0,0,0,474,476,5,
		31,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,478,3,38,19,
		0,478,515,1,0,0,0,479,480,5,32,0,0,480,515,3,38,19,0,481,483,5,33,0,0,
		482,484,3,38,19,0,483,482,1,0,0,0,483,484,1,0,0,0,484,515,1,0,0,0,485,
		491,3,50,25,0,486,488,3,52,26,0,487,489,5,20,0,0,488,487,1,0,0,0,488,489,
		1,0,0,0,489,491,1,0,0,0,490,485,1,0,0,0,490,486,1,0,0,0,491,492,1,0,0,
		0,492,493,5,3,0,0,493,495,1,0,0,0,494,490,1,0,0,0,494,495,1,0,0,0,495,
		496,1,0,0,0,496,497,5,62,0,0,497,498,5,34,0,0,498,515,3,38,19,0,499,500,
		3,52,26,0,500,501,3,56,28,0,501,502,5,34,0,0,502,503,3,38,19,0,503,515,
		1,0,0,0,504,506,3,44,22,0,505,507,3,36,18,0,506,505,1,0,0,0,506,507,1,
		0,0,0,507,515,1,0,0,0,508,509,3,44,22,0,509,510,5,35,0,0,510,511,5,13,
		0,0,511,512,3,72,36,0,512,513,5,14,0,0,513,515,1,0,0,0,514,419,1,0,0,0,
		514,434,1,0,0,0,514,446,1,0,0,0,514,456,1,0,0,0,514,463,1,0,0,0,514,479,
		1,0,0,0,514,481,1,0,0,0,514,494,1,0,0,0,514,499,1,0,0,0,514,504,1,0,0,
		0,514,508,1,0,0,0,515,41,1,0,0,0,516,517,7,0,0,0,517,43,1,0,0,0,518,520,
		3,46,23,0,519,521,5,62,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,527,1,0,
		0,0,522,523,3,42,21,0,523,524,3,52,26,0,524,526,1,0,0,0,525,522,1,0,0,
		0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,531,1,0,0,0,529,
		527,1,0,0,0,530,532,5,74,0,0,531,530,1,0,0,0,531,532,1,0,0,0,532,45,1,
		0,0,0,533,534,6,23,-1,0,534,535,3,48,24,0,535,544,1,0,0,0,536,537,10,1,
		0,0,537,539,5,62,0,0,538,540,5,74,0,0,539,538,1,0,0,0,539,540,1,0,0,0,
		540,541,1,0,0,0,541,543,3,46,23,2,542,536,1,0,0,0,543,546,1,0,0,0,544,
		542,1,0,0,0,544,545,1,0,0,0,545,47,1,0,0,0,546,544,1,0,0,0,547,549,3,42,
		21,0,548,547,1,0,0,0,548,549,1,0,0,0,549,555,1,0,0,0,550,556,3,50,25,0,
		551,553,3,52,26,0,552,554,5,20,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,
		556,1,0,0,0,555,550,1,0,0,0,555,551,1,0,0,0,556,49,1,0,0,0,557,560,5,39,
		0,0,558,561,3,182,91,0,559,561,3,132,66,0,560,558,1,0,0,0,560,559,1,0,
		0,0,561,564,1,0,0,0,562,564,3,60,30,0,563,557,1,0,0,0,563,562,1,0,0,0,
		564,51,1,0,0,0,565,566,6,26,-1,0,566,582,3,0,0,0,567,582,3,6,3,0,568,582,
		5,20,0,0,569,571,5,10,0,0,570,572,3,54,27,0,571,570,1,0,0,0,571,572,1,
		0,0,0,572,573,1,0,0,0,573,582,5,11,0,0,574,575,3,50,25,0,575,576,5,3,0,
		0,576,577,5,62,0,0,577,582,1,0,0,0,578,579,3,50,25,0,579,580,3,26,13,0,
		580,582,1,0,0,0,581,565,1,0,0,0,581,567,1,0,0,0,581,568,1,0,0,0,581,569,
		1,0,0,0,581,574,1,0,0,0,581,578,1,0,0,0,582,598,1,0,0,0,583,585,10,4,0,
		0,584,586,5,20,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,
		588,5,3,0,0,588,597,5,62,0,0,589,591,10,2,0,0,590,592,5,20,0,0,591,590,
		1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,597,3,26,13,0,594,595,10,1,
		0,0,595,597,3,56,28,0,596,583,1,0,0,0,596,589,1,0,0,0,596,594,1,0,0,0,
		597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,53,1,0,0,0,600,598,
		1,0,0,0,601,606,3,38,19,0,602,603,5,4,0,0,603,605,3,38,19,0,604,602,1,
		0,0,0,605,608,1,0,0,0,606,604,1,0,0,0,606,607,1,0,0,0,607,55,1,0,0,0,608,
		606,1,0,0,0,609,610,5,10,0,0,610,611,3,58,29,0,611,612,5,11,0,0,612,622,
		1,0,0,0,613,614,5,13,0,0,614,615,3,58,29,0,615,616,5,14,0,0,616,622,1,
		0,0,0,617,619,5,74,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,
		620,622,3,60,30,0,621,609,1,0,0,0,621,613,1,0,0,0,621,618,1,0,0,0,622,
		57,1,0,0,0,623,625,3,54,27,0,624,623,1,0,0,0,624,625,1,0,0,0,625,636,1,
		0,0,0,626,627,3,54,27,0,627,628,5,4,0,0,628,630,1,0,0,0,629,626,1,0,0,
		0,629,630,1,0,0,0,630,631,1,0,0,0,631,633,3,44,22,0,632,634,7,1,0,0,633,
		632,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,624,1,0,0,0,635,629,1,
		0,0,0,636,59,1,0,0,0,637,638,5,13,0,0,638,639,3,72,36,0,639,640,5,14,0,
		0,640,646,1,0,0,0,641,642,5,13,0,0,642,643,3,62,31,0,643,644,5,14,0,0,
		644,646,1,0,0,0,645,637,1,0,0,0,645,641,1,0,0,0,646,61,1,0,0,0,647,649,
		3,64,32,0,648,647,1,0,0,0,649,650,1,0,0,0,650,648,1,0,0,0,650,651,1,0,
		0,0,651,653,1,0,0,0,652,654,3,66,33,0,653,652,1,0,0,0,653,654,1,0,0,0,
		654,63,1,0,0,0,655,681,3,138,69,0,656,658,3,128,64,0,657,656,1,0,0,0,658,
		661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,663,1,0,0,0,661,659,1,
		0,0,0,662,664,7,2,0,0,663,662,1,0,0,0,663,664,1,0,0,0,664,665,1,0,0,0,
		665,681,3,160,80,0,666,668,3,128,64,0,667,666,1,0,0,0,668,671,1,0,0,0,
		669,667,1,0,0,0,669,670,1,0,0,0,670,675,1,0,0,0,671,669,1,0,0,0,672,674,
		3,122,61,0,673,672,1,0,0,0,674,677,1,0,0,0,675,673,1,0,0,0,675,676,1,0,
		0,0,676,678,1,0,0,0,677,675,1,0,0,0,678,681,3,170,85,0,679,681,3,40,20,
		0,680,655,1,0,0,0,680,659,1,0,0,0,680,669,1,0,0,0,680,679,1,0,0,0,681,
		65,1,0,0,0,682,699,3,40,20,0,683,694,3,116,58,0,684,686,5,22,0,0,685,684,
		1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,690,5,62,0,0,688,690,5,20,
		0,0,689,685,1,0,0,0,689,688,1,0,0,0,690,691,1,0,0,0,691,692,5,19,0,0,692,
		694,3,20,10,0,693,683,1,0,0,0,693,689,1,0,0,0,694,695,1,0,0,0,695,696,
		5,9,0,0,696,697,3,62,31,0,697,699,1,0,0,0,698,682,1,0,0,0,698,693,1,0,
		0,0,699,67,1,0,0,0,700,702,3,70,35,0,701,700,1,0,0,0,702,703,1,0,0,0,703,
		701,1,0,0,0,703,704,1,0,0,0,704,69,1,0,0,0,705,706,3,80,40,0,706,707,5,
		41,0,0,707,715,3,38,19,0,708,714,3,76,38,0,709,710,3,80,40,0,710,711,5,
		34,0,0,711,712,3,38,19,0,712,714,1,0,0,0,713,708,1,0,0,0,713,709,1,0,0,
		0,714,717,1,0,0,0,715,713,1,0,0,0,715,716,1,0,0,0,716,71,1,0,0,0,717,715,
		1,0,0,0,718,720,3,74,37,0,719,718,1,0,0,0,720,721,1,0,0,0,721,719,1,0,
		0,0,721,722,1,0,0,0,722,73,1,0,0,0,723,724,5,42,0,0,724,726,3,78,39,0,
		725,727,3,76,38,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,
		729,5,9,0,0,729,730,3,62,31,0,730,75,1,0,0,0,731,732,5,23,0,0,732,733,
		3,44,22,0,733,77,1,0,0,0,734,739,3,80,40,0,735,736,5,43,0,0,736,738,3,
		80,40,0,737,735,1,0,0,0,738,741,1,0,0,0,739,737,1,0,0,0,739,740,1,0,0,
		0,740,79,1,0,0,0,741,739,1,0,0,0,742,743,7,3,0,0,743,744,5,19,0,0,744,
		747,3,34,17,0,745,747,3,82,41,0,746,742,1,0,0,0,746,745,1,0,0,0,747,81,
		1,0,0,0,748,751,5,62,0,0,749,750,5,44,0,0,750,752,3,84,42,0,751,749,1,
		0,0,0,751,752,1,0,0,0,752,755,1,0,0,0,753,755,3,84,42,0,754,748,1,0,0,
		0,754,753,1,0,0,0,755,83,1,0,0,0,756,769,3,86,43,0,757,765,3,86,43,0,758,
		760,5,62,0,0,759,761,5,74,0,0,760,759,1,0,0,0,760,761,1,0,0,0,761,762,
		1,0,0,0,762,764,3,86,43,0,763,758,1,0,0,0,764,767,1,0,0,0,765,763,1,0,
		0,0,765,766,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,768,756,1,0,0,0,768,
		757,1,0,0,0,769,85,1,0,0,0,770,802,5,20,0,0,771,802,5,69,0,0,772,802,3,
		0,0,0,773,779,3,6,3,0,774,776,5,10,0,0,775,777,3,88,44,0,776,775,1,0,0,
		0,776,777,1,0,0,0,777,778,1,0,0,0,778,780,5,11,0,0,779,774,1,0,0,0,779,
		780,1,0,0,0,780,802,1,0,0,0,781,782,3,6,3,0,782,786,5,10,0,0,783,784,3,
		88,44,0,784,785,5,4,0,0,785,787,1,0,0,0,786,783,1,0,0,0,786,787,1,0,0,
		0,787,790,1,0,0,0,788,789,5,62,0,0,789,791,5,44,0,0,790,788,1,0,0,0,790,
		791,1,0,0,0,791,792,1,0,0,0,792,793,5,20,0,0,793,794,5,21,0,0,794,795,
		5,11,0,0,795,802,1,0,0,0,796,798,5,10,0,0,797,799,3,88,44,0,798,797,1,
		0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,802,5,11,0,0,801,770,1,0,0,0,
		801,771,1,0,0,0,801,772,1,0,0,0,801,773,1,0,0,0,801,781,1,0,0,0,801,796,
		1,0,0,0,802,87,1,0,0,0,803,806,3,78,39,0,804,805,5,4,0,0,805,807,3,88,
		44,0,806,804,1,0,0,0,806,807,1,0,0,0,807,811,1,0,0,0,808,809,5,20,0,0,
		809,811,5,21,0,0,810,803,1,0,0,0,810,808,1,0,0,0,811,89,1,0,0,0,812,813,
		5,7,0,0,813,818,3,94,47,0,814,815,5,4,0,0,815,817,3,94,47,0,816,814,1,
		0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,
		820,818,1,0,0,0,821,822,5,8,0,0,822,91,1,0,0,0,823,824,5,7,0,0,824,829,
		3,96,48,0,825,826,5,4,0,0,826,828,3,96,48,0,827,825,1,0,0,0,828,831,1,
		0,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,832,1,0,0,0,831,829,1,0,0,0,
		832,833,5,8,0,0,833,93,1,0,0,0,834,836,3,128,64,0,835,834,1,0,0,0,836,
		839,1,0,0,0,837,835,1,0,0,0,837,838,1,0,0,0,838,841,1,0,0,0,839,837,1,
		0,0,0,840,842,7,4,0,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,
		843,844,3,96,48,0,844,95,1,0,0,0,845,847,7,5,0,0,846,848,3,90,45,0,847,
		846,1,0,0,0,847,848,1,0,0,0,848,851,1,0,0,0,849,850,5,45,0,0,850,852,3,
		10,5,0,851,849,1,0,0,0,851,852,1,0,0,0,852,855,1,0,0,0,853,854,5,46,0,
		0,854,856,3,10,5,0,855,853,1,0,0,0,855,856,1,0,0,0,856,861,1,0,0,0,857,
		858,5,47,0,0,858,860,3,10,5,0,859,857,1,0,0,0,860,863,1,0,0,0,861,859,
		1,0,0,0,861,862,1,0,0,0,862,868,1,0,0,0,863,861,1,0,0,0,864,865,5,19,0,
		0,865,867,3,10,5,0,866,864,1,0,0,0,867,870,1,0,0,0,868,866,1,0,0,0,868,
		869,1,0,0,0,869,97,1,0,0,0,870,868,1,0,0,0,871,873,3,100,50,0,872,871,
		1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,0,0,0,875,885,1,0,0,
		0,876,874,1,0,0,0,877,879,5,74,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,
		880,1,0,0,0,880,881,5,10,0,0,881,882,5,22,0,0,882,883,3,102,51,0,883,884,
		5,11,0,0,884,886,1,0,0,0,885,878,1,0,0,0,885,886,1,0,0,0,886,99,1,0,0,
		0,887,889,5,74,0,0,888,887,1,0,0,0,888,889,1,0,0,0,889,890,1,0,0,0,890,
		892,5,10,0,0,891,893,3,102,51,0,892,891,1,0,0,0,892,893,1,0,0,0,893,894,
		1,0,0,0,894,895,5,11,0,0,895,101,1,0,0,0,896,901,3,104,52,0,897,898,5,
		4,0,0,898,900,3,104,52,0,899,897,1,0,0,0,900,903,1,0,0,0,901,899,1,0,0,
		0,901,902,1,0,0,0,902,103,1,0,0,0,903,901,1,0,0,0,904,906,3,128,64,0,905,
		904,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,0,908,910,1,
		0,0,0,909,907,1,0,0,0,910,913,5,62,0,0,911,912,5,19,0,0,912,914,3,106,
		53,0,913,911,1,0,0,0,913,914,1,0,0,0,914,917,1,0,0,0,915,916,5,34,0,0,
		916,918,3,38,19,0,917,915,1,0,0,0,917,918,1,0,0,0,918,105,1,0,0,0,919,
		926,3,10,5,0,920,921,5,9,0,0,921,926,3,10,5,0,922,923,3,10,5,0,923,924,
		5,21,0,0,924,926,1,0,0,0,925,919,1,0,0,0,925,920,1,0,0,0,925,922,1,0,0,
		0,926,107,1,0,0,0,927,929,3,110,55,0,928,927,1,0,0,0,929,932,1,0,0,0,930,
		928,1,0,0,0,930,931,1,0,0,0,931,941,1,0,0,0,932,930,1,0,0,0,933,935,5,
		74,0,0,934,933,1,0,0,0,934,935,1,0,0,0,935,936,1,0,0,0,936,937,5,10,0,
		0,937,938,5,22,0,0,938,939,3,112,56,0,939,940,5,11,0,0,940,942,1,0,0,0,
		941,934,1,0,0,0,941,942,1,0,0,0,942,109,1,0,0,0,943,945,5,74,0,0,944,943,
		1,0,0,0,944,945,1,0,0,0,945,946,1,0,0,0,946,948,5,10,0,0,947,949,3,112,
		56,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,951,5,11,0,0,
		951,111,1,0,0,0,952,957,3,114,57,0,953,954,5,4,0,0,954,956,3,114,57,0,
		955,953,1,0,0,0,956,959,1,0,0,0,957,955,1,0,0,0,957,958,1,0,0,0,958,113,
		1,0,0,0,959,957,1,0,0,0,960,962,3,128,64,0,961,960,1,0,0,0,962,965,1,0,
		0,0,963,961,1,0,0,0,963,964,1,0,0,0,964,969,1,0,0,0,965,963,1,0,0,0,966,
		968,3,120,60,0,967,966,1,0,0,0,968,971,1,0,0,0,969,967,1,0,0,0,969,970,
		1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,972,974,7,6,0,0,973,972,1,0,0,
		0,973,974,1,0,0,0,974,975,1,0,0,0,975,976,5,62,0,0,976,977,5,19,0,0,977,
		980,3,106,53,0,978,979,5,34,0,0,979,981,3,38,19,0,980,978,1,0,0,0,980,
		981,1,0,0,0,981,115,1,0,0,0,982,983,5,10,0,0,983,988,3,118,59,0,984,985,
		5,4,0,0,985,987,3,118,59,0,986,984,1,0,0,0,987,990,1,0,0,0,988,986,1,0,
		0,0,988,989,1,0,0,0,989,991,1,0,0,0,990,988,1,0,0,0,991,992,5,11,0,0,992,
		117,1,0,0,0,993,996,7,5,0,0,994,995,5,19,0,0,995,997,3,10,5,0,996,994,
		1,0,0,0,996,997,1,0,0,0,997,119,1,0,0,0,998,1002,3,122,61,0,999,1002,3,
		124,62,0,1000,1002,5,49,0,0,1001,998,1,0,0,0,1001,999,1,0,0,0,1001,1000,
		1,0,0,0,1002,121,1,0,0,0,1003,1004,7,7,0,0,1004,123,1,0,0,0,1005,1007,
		7,8,0,0,1006,1008,3,126,63,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,
		125,1,0,0,0,1009,1010,5,7,0,0,1010,1011,7,9,0,0,1011,1012,5,8,0,0,1012,
		127,1,0,0,0,1013,1014,5,44,0,0,1014,1018,3,24,12,0,1015,1017,3,56,28,0,
		1016,1015,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,1019,1,0,0,
		0,1019,129,1,0,0,0,1020,1018,1,0,0,0,1021,1022,5,44,0,0,1022,1023,3,24,
		12,0,1023,1024,3,56,28,0,1024,131,1,0,0,0,1025,1027,5,74,0,0,1026,1025,
		1,0,0,0,1026,1027,1,0,0,0,1027,1028,1,0,0,0,1028,1030,5,13,0,0,1029,1031,
		3,136,68,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1033,1,0,0,0,1032,
		1034,3,134,67,0,1033,1032,1,0,0,0,1034,1035,1,0,0,0,1035,1033,1,0,0,0,
		1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,1038,5,14,0,0,1038,133,1,0,0,
		0,1039,1074,3,138,69,0,1040,1042,3,128,64,0,1041,1043,5,74,0,0,1042,1041,
		1,0,0,0,1042,1043,1,0,0,0,1043,1045,1,0,0,0,1044,1040,1,0,0,0,1045,1048,
		1,0,0,0,1046,1044,1,0,0,0,1046,1047,1,0,0,0,1047,1052,1,0,0,0,1048,1046,
		1,0,0,0,1049,1051,3,120,60,0,1050,1049,1,0,0,0,1051,1054,1,0,0,0,1052,
		1050,1,0,0,0,1052,1053,1,0,0,0,1053,1055,1,0,0,0,1054,1052,1,0,0,0,1055,
		1074,3,160,80,0,1056,1058,3,128,64,0,1057,1059,5,74,0,0,1058,1057,1,0,
		0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,1056,1,0,0,0,1061,1064,1,
		0,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1068,1,0,0,0,1064,1062,
		1,0,0,0,1065,1067,3,120,60,0,1066,1065,1,0,0,0,1067,1070,1,0,0,0,1068,
		1066,1,0,0,0,1068,1069,1,0,0,0,1069,1071,1,0,0,0,1070,1068,1,0,0,0,1071,
		1074,3,146,73,0,1072,1074,3,38,19,0,1073,1039,1,0,0,0,1073,1046,1,0,0,
		0,1073,1062,1,0,0,0,1073,1072,1,0,0,0,1074,135,1,0,0,0,1075,1078,5,62,
		0,0,1076,1077,5,19,0,0,1077,1079,3,10,5,0,1078,1076,1,0,0,0,1078,1079,
		1,0,0,0,1079,1080,1,0,0,0,1080,1087,5,9,0,0,1081,1082,5,5,0,0,1082,1083,
		5,19,0,0,1083,1084,3,10,5,0,1084,1085,5,9,0,0,1085,1087,1,0,0,0,1086,1075,
		1,0,0,0,1086,1081,1,0,0,0,1087,137,1,0,0,0,1088,1089,5,55,0,0,1089,1094,
		3,140,70,0,1090,1091,5,4,0,0,1091,1093,3,140,70,0,1092,1090,1,0,0,0,1093,
		1096,1,0,0,0,1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,139,1,0,0,0,1096,
		1094,1,0,0,0,1097,1104,3,6,3,0,1098,1102,5,3,0,0,1099,1103,5,62,0,0,1100,
		1103,5,20,0,0,1101,1103,3,142,71,0,1102,1099,1,0,0,0,1102,1100,1,0,0,0,
		1102,1101,1,0,0,0,1103,1105,1,0,0,0,1104,1098,1,0,0,0,1104,1105,1,0,0,
		0,1105,141,1,0,0,0,1106,1112,5,13,0,0,1107,1108,3,144,72,0,1108,1109,5,
		4,0,0,1109,1111,1,0,0,0,1110,1107,1,0,0,0,1111,1114,1,0,0,0,1112,1110,
		1,0,0,0,1112,1113,1,0,0,0,1113,1117,1,0,0,0,1114,1112,1,0,0,0,1115,1118,
		3,144,72,0,1116,1118,5,20,0,0,1117,1115,1,0,0,0,1117,1116,1,0,0,0,1118,
		1119,1,0,0,0,1119,1120,5,14,0,0,1120,143,1,0,0,0,1121,1124,5,62,0,0,1122,
		1123,5,9,0,0,1123,1125,7,5,0,0,1124,1122,1,0,0,0,1124,1125,1,0,0,0,1125,
		145,1,0,0,0,1126,1127,5,16,0,0,1127,1141,3,148,74,0,1128,1129,5,48,0,0,
		1129,1141,3,150,75,0,1130,1131,5,56,0,0,1131,1141,3,152,76,0,1132,1136,
		5,15,0,0,1133,1135,5,74,0,0,1134,1133,1,0,0,0,1135,1138,1,0,0,0,1136,1134,
		1,0,0,0,1136,1137,1,0,0,0,1137,1139,1,0,0,0,1138,1136,1,0,0,0,1139,1141,
		3,156,78,0,1140,1126,1,0,0,0,1140,1128,1,0,0,0,1140,1130,1,0,0,0,1140,
		1132,1,0,0,0,1141,147,1,0,0,0,1142,1143,3,4,2,0,1143,1144,5,19,0,0,1144,
		1145,3,10,5,0,1145,149,1,0,0,0,1146,1147,3,4,2,0,1147,1148,5,19,0,0,1148,
		1149,3,10,5,0,1149,151,1,0,0,0,1150,1153,3,154,77,0,1151,1152,5,19,0,0,
		1152,1154,3,10,5,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,153,1,0,0,
		0,1155,1157,5,62,0,0,1156,1158,3,92,46,0,1157,1156,1,0,0,0,1157,1158,1,
		0,0,0,1158,1159,1,0,0,0,1159,1160,3,98,49,0,1160,155,1,0,0,0,1161,1163,
		5,62,0,0,1162,1164,3,90,45,0,1163,1162,1,0,0,0,1163,1164,1,0,0,0,1164,
		1167,1,0,0,0,1165,1166,5,45,0,0,1166,1168,3,10,5,0,1167,1165,1,0,0,0,1167,
		1168,1,0,0,0,1168,1171,1,0,0,0,1169,1170,5,46,0,0,1170,1172,3,10,5,0,1171,
		1169,1,0,0,0,1171,1172,1,0,0,0,1172,157,1,0,0,0,1173,1174,5,16,0,0,1174,
		1178,3,162,81,0,1175,1176,5,48,0,0,1176,1178,3,164,82,0,1177,1173,1,0,
		0,0,1177,1175,1,0,0,0,1178,159,1,0,0,0,1179,1192,3,158,79,0,1180,1181,
		5,56,0,0,1181,1192,3,166,83,0,1182,1186,5,15,0,0,1183,1185,5,74,0,0,1184,
		1183,1,0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,
		1189,1,0,0,0,1188,1186,1,0,0,0,1189,1192,3,168,84,0,1190,1192,3,170,85,
		0,1191,1179,1,0,0,0,1191,1180,1,0,0,0,1191,1182,1,0,0,0,1191,1190,1,0,
		0,0,1192,161,1,0,0,0,1193,1198,3,82,41,0,1194,1195,5,4,0,0,1195,1197,3,
		82,41,0,1196,1194,1,0,0,0,1197,1200,1,0,0,0,1198,1196,1,0,0,0,1198,1199,
		1,0,0,0,1199,1203,1,0,0,0,1200,1198,1,0,0,0,1201,1202,5,19,0,0,1202,1204,
		3,10,5,0,1203,1201,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,
		5,34,0,0,1206,1207,3,38,19,0,1207,163,1,0,0,0,1208,1216,3,162,81,0,1209,
		1210,3,4,2,0,1210,1211,5,19,0,0,1211,1212,3,10,5,0,1212,1213,5,34,0,0,
		1213,1214,5,20,0,0,1214,1216,1,0,0,0,1215,1208,1,0,0,0,1215,1209,1,0,0,
		0,1216,165,1,0,0,0,1217,1220,3,154,77,0,1218,1219,5,19,0,0,1219,1221,3,
		10,5,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,1222,1,0,0,0,1222,1223,
		5,34,0,0,1223,1224,3,38,19,0,1224,1245,1,0,0,0,1225,1227,3,154,77,0,1226,
		1228,5,74,0,0,1227,1226,1,0,0,0,1227,1228,1,0,0,0,1228,1229,1,0,0,0,1229,
		1230,5,13,0,0,1230,1231,3,62,31,0,1231,1232,5,14,0,0,1232,1245,1,0,0,0,
		1233,1234,5,5,0,0,1234,1235,3,100,50,0,1235,1242,3,98,49,0,1236,1237,5,
		34,0,0,1237,1243,3,196,98,0,1238,1240,5,74,0,0,1239,1238,1,0,0,0,1239,
		1240,1,0,0,0,1240,1241,1,0,0,0,1241,1243,3,198,99,0,1242,1236,1,0,0,0,
		1242,1239,1,0,0,0,1243,1245,1,0,0,0,1244,1217,1,0,0,0,1244,1225,1,0,0,
		0,1244,1233,1,0,0,0,1245,167,1,0,0,0,1246,1248,5,62,0,0,1247,1249,3,90,
		45,0,1248,1247,1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,5,
		34,0,0,1251,1252,3,10,5,0,1252,169,1,0,0,0,1253,1255,5,42,0,0,1254,1253,
		1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1257,5,57,0,0,1257,1266,
		3,172,86,0,1258,1260,5,42,0,0,1259,1258,1,0,0,0,1259,1260,1,0,0,0,1260,
		1261,1,0,0,0,1261,1262,5,58,0,0,1262,1266,3,176,88,0,1263,1264,5,59,0,
		0,1264,1266,3,174,87,0,1265,1254,1,0,0,0,1265,1259,1,0,0,0,1265,1263,1,
		0,0,0,1266,171,1,0,0,0,1267,1269,5,62,0,0,1268,1270,3,90,45,0,1269,1268,
		1,0,0,0,1269,1270,1,0,0,0,1270,1274,1,0,0,0,1271,1273,3,130,65,0,1272,
		1271,1,0,0,0,1273,1276,1,0,0,0,1274,1272,1,0,0,0,1274,1275,1,0,0,0,1275,
		1278,1,0,0,0,1276,1274,1,0,0,0,1277,1279,3,124,62,0,1278,1277,1,0,0,0,
		1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,3,108,54,0,1281,1282,3,178,
		89,0,1282,173,1,0,0,0,1283,1285,5,62,0,0,1284,1286,3,90,45,0,1285,1284,
		1,0,0,0,1285,1286,1,0,0,0,1286,1287,1,0,0,0,1287,1288,3,180,90,0,1288,
		175,1,0,0,0,1289,1290,5,62,0,0,1290,1291,3,178,89,0,1291,177,1,0,0,0,1292,
		1293,5,60,0,0,1293,1301,3,182,91,0,1294,1296,5,60,0,0,1295,1294,1,0,0,
		0,1295,1296,1,0,0,0,1296,1297,1,0,0,0,1297,1299,3,132,66,0,1298,1295,1,
		0,0,0,1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,1292,1,0,0,0,1300,1298,
		1,0,0,0,1301,179,1,0,0,0,1302,1303,5,60,0,0,1303,1311,3,184,92,0,1304,
		1306,5,60,0,0,1305,1304,1,0,0,0,1305,1306,1,0,0,0,1306,1307,1,0,0,0,1307,
		1309,3,132,66,0,1308,1305,1,0,0,0,1308,1309,1,0,0,0,1309,1311,1,0,0,0,
		1310,1302,1,0,0,0,1310,1308,1,0,0,0,1311,181,1,0,0,0,1312,1314,3,192,96,
		0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1315,1,0,0,0,1315,1317,3,186,
		93,0,1316,1318,3,132,66,0,1317,1316,1,0,0,0,1317,1318,1,0,0,0,1318,183,
		1,0,0,0,1319,1321,3,192,96,0,1320,1319,1,0,0,0,1320,1321,1,0,0,0,1321,
		1322,1,0,0,0,1322,1324,3,188,94,0,1323,1325,3,132,66,0,1324,1323,1,0,0,
		0,1324,1325,1,0,0,0,1325,185,1,0,0,0,1326,1331,3,190,95,0,1327,1328,5,
		17,0,0,1328,1330,3,22,11,0,1329,1327,1,0,0,0,1330,1333,1,0,0,0,1331,1329,
		1,0,0,0,1331,1332,1,0,0,0,1332,187,1,0,0,0,1333,1331,1,0,0,0,1334,1339,
		3,22,11,0,1335,1336,5,17,0,0,1336,1338,3,22,11,0,1337,1335,1,0,0,0,1338,
		1341,1,0,0,0,1339,1337,1,0,0,0,1339,1340,1,0,0,0,1340,189,1,0,0,0,1341,
		1339,1,0,0,0,1342,1346,3,22,11,0,1343,1345,3,56,28,0,1344,1343,1,0,0,0,
		1345,1348,1,0,0,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,191,1,0,0,0,
		1348,1346,1,0,0,0,1349,1351,5,13,0,0,1350,1352,3,194,97,0,1351,1350,1,
		0,0,0,1352,1353,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,0,1354,1355,
		1,0,0,0,1355,1356,5,14,0,0,1356,1357,5,17,0,0,1357,193,1,0,0,0,1358,1360,
		3,128,64,0,1359,1361,5,74,0,0,1360,1359,1,0,0,0,1360,1361,1,0,0,0,1361,
		1363,1,0,0,0,1362,1358,1,0,0,0,1363,1366,1,0,0,0,1364,1362,1,0,0,0,1364,
		1365,1,0,0,0,1365,1370,1,0,0,0,1366,1364,1,0,0,0,1367,1369,3,120,60,0,
		1368,1367,1,0,0,0,1369,1372,1,0,0,0,1370,1368,1,0,0,0,1370,1371,1,0,0,
		0,1371,1373,1,0,0,0,1372,1370,1,0,0,0,1373,1374,3,158,79,0,1374,195,1,
		0,0,0,1375,1378,3,200,100,0,1376,1378,3,198,99,0,1377,1375,1,0,0,0,1377,
		1376,1,0,0,0,1378,197,1,0,0,0,1379,1380,5,13,0,0,1380,1384,3,200,100,0,
		1381,1383,3,64,32,0,1382,1381,1,0,0,0,1383,1386,1,0,0,0,1384,1382,1,0,
		0,0,1384,1385,1,0,0,0,1385,1387,1,0,0,0,1386,1384,1,0,0,0,1387,1388,5,
		14,0,0,1388,199,1,0,0,0,1389,1391,5,5,0,0,1390,1392,3,56,28,0,1391,1390,
		1,0,0,0,1392,1393,1,0,0,0,1393,1391,1,0,0,0,1393,1394,1,0,0,0,1394,201,
		1,0,0,0,1395,1397,3,204,102,0,1396,1395,1,0,0,0,1397,1398,1,0,0,0,1398,
		1396,1,0,0,0,1398,1399,1,0,0,0,1399,203,1,0,0,0,1400,1402,3,128,64,0,1401,
		1403,5,74,0,0,1402,1401,1,0,0,0,1402,1403,1,0,0,0,1403,1405,1,0,0,0,1404,
		1400,1,0,0,0,1405,1408,1,0,0,0,1406,1404,1,0,0,0,1406,1407,1,0,0,0,1407,
		1412,1,0,0,0,1408,1406,1,0,0,0,1409,1411,3,120,60,0,1410,1409,1,0,0,0,
		1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,
		0,1414,1412,1,0,0,0,1415,1420,3,170,85,0,1416,1420,3,138,69,0,1417,1420,
		3,206,103,0,1418,1420,3,208,104,0,1419,1406,1,0,0,0,1419,1416,1,0,0,0,
		1419,1417,1,0,0,0,1419,1418,1,0,0,0,1420,205,1,0,0,0,1421,1422,5,61,0,
		0,1422,1424,3,2,1,0,1423,1425,5,74,0,0,1424,1423,1,0,0,0,1424,1425,1,0,
		0,0,1425,1426,1,0,0,0,1426,1427,5,13,0,0,1427,1428,3,202,101,0,1428,1429,
		5,14,0,0,1429,207,1,0,0,0,1430,1431,5,61,0,0,1431,1432,5,58,0,0,1432,1433,
		3,176,88,0,1433,209,1,0,0,0,1434,1435,5,61,0,0,1435,1437,3,2,1,0,1436,
		1434,1,0,0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,
		1441,1,0,0,0,1440,1438,1,0,0,0,1441,1442,3,202,101,0,1442,211,1,0,0,0,
		208,213,217,225,232,240,247,252,256,258,265,278,280,289,292,295,302,310,
		317,325,329,332,338,345,351,358,360,372,376,382,389,399,404,408,412,417,
		426,432,441,450,454,472,475,483,488,490,494,506,514,520,527,531,539,544,
		548,553,555,560,563,571,581,585,591,596,598,606,618,621,624,629,633,635,
		645,650,653,659,663,669,675,680,685,689,693,698,703,713,715,721,726,739,
		746,751,754,760,765,768,776,779,786,790,798,801,806,810,818,829,837,841,
		847,851,855,861,868,874,878,885,888,892,901,907,913,917,925,930,934,941,
		944,948,957,963,969,973,980,988,996,1001,1007,1018,1026,1030,1035,1042,
		1046,1052,1058,1062,1068,1073,1078,1086,1094,1102,1104,1112,1117,1124,
		1136,1140,1153,1157,1163,1167,1171,1177,1186,1191,1198,1203,1215,1220,
		1227,1239,1242,1244,1248,1254,1259,1265,1269,1274,1278,1285,1295,1298,
		1300,1305,1308,1310,1313,1317,1320,1324,1331,1339,1346,1353,1360,1364,
		1370,1377,1384,1393,1398,1402,1406,1412,1419,1424,1438
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
